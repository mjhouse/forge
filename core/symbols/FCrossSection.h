#ifndef __FCROSSSECTION_H__
#define __FCROSSSECTION_H__
      
#include <QtGui/QVector2D>
#include <QtWidgets/QWidget>

#include "FGeometry.h"
#include "FSymbol.h"

#define DEPTH_NORMAL QVector3D(0.0, 0.0, 1.0)
#define DEPTH_LENGTH 0.5

class FCrossSection : public QWidget, public FSymbol {
	Q_OBJECT

private:
	
	std::vector<QVector3D> m_vertices;	/*!< The vertices of the tesselated crosssection */

	std::vector<QVector3D> m_normals;	/*!< The calculated normals of the thickened crosssection */

	std::vector<uint> m_indices;		/*!< Indices generated by tesselation */

	float m_length;						/*!< The length of the thickened output geometry */

	void initialize(std::vector<QVector3D>& t_coordinates);

	/* Find triangles for the 2D surface */
	void tessellate();

public:
	FCrossSection();

	/* Convert the crosssection to 3D (thickened) geometry */
	FGeometry* toGeometry();

	void updateGeometry(FGeometry* t_geometry);

	void setGeometry(std::vector<QVector3D>& t_points);

	/* Set the length of the extruded crosssection */
	void setLength(float t_length);

	/* Get the length of the extruded crosssection */
	float length();

};

#endif // __FCROSSSECTION_H__
