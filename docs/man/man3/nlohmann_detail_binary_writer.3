.TH "nlohmann::detail::binary_writer< BasicJsonType, CharType >" 3 "Sat Apr 4 2020" "Version 0.1.0" "Forge" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nlohmann::detail::binary_writer< BasicJsonType, CharType > \- serialization to CBOR and MessagePack values  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBbinary_writer\fP (\fBoutput_adapter_t\fP< CharType > adapter)"
.br
.RI "create a binary writer "
.ti -1c
.RI "\fBvoid\fP \fBwrite_bson\fP (const BasicJsonType &j)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwrite_cbor\fP (const BasicJsonType &j)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwrite_msgpack\fP (const BasicJsonType &j)"
.br
.ti -1c
.RI "\fBvoid\fP \fBwrite_ubjson\fP (const BasicJsonType &j, const bool use_count, const bool use_type, const bool add_prefix=true)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "template<typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_signed< char >::value > *  = nullptr> static constexpr CharType \fBto_char_type\fP (std::uint8_t x) noexcept"
.br
.ti -1c
.RI "template<typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_unsigned< char >::value > *  = nullptr> static CharType \fBto_char_type\fP (std::uint8_t x) noexcept"
.br
.ti -1c
.RI "template<typename C  = CharType, enable_if_t< std::is_unsigned< C >::value > *  = nullptr> static constexpr CharType \fBto_char_type\fP (std::uint8_t x) noexcept"
.br
.ti -1c
.RI "template<typename InputCharType , typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_signed< char >::value and std::is_same< char, typename std::remove_cv< InputCharType >::type >::value > *  = nullptr> static constexpr CharType \fBto_char_type\fP (InputCharType x) noexcept"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BasicJsonType, typename CharType>
.br
class nlohmann::detail::binary_writer< BasicJsonType, CharType >"
serialization to CBOR and MessagePack values 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename BasicJsonType , typename CharType > \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::\fBbinary_writer\fP (\fBoutput_adapter_t\fP< CharType > adapter)\fC [inline]\fP, \fC [explicit]\fP"

.PP
create a binary writer 
.PP
\fBParameters\fP
.RS 4
\fIadapter\fP output adapter to write to 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename BasicJsonType , typename CharType > template<typename InputCharType , typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_signed< char >::value and std::is_same< char, typename std::remove_cv< InputCharType >::type >::value > *  = nullptr> static constexpr CharType \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::to_char_type (InputCharType x)\fC [inline]\fP, \fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.SS "template<typename BasicJsonType , typename CharType > template<typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_signed< char >::value > *  = nullptr> static constexpr CharType \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::to_char_type (std::uint8_t x)\fC [inline]\fP, \fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.SS "template<typename BasicJsonType , typename CharType > template<typename C  = CharType, enable_if_t< std::is_signed< C >::value and std::is_unsigned< char >::value > *  = nullptr> static CharType \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::to_char_type (std::uint8_t x)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"

.SS "template<typename BasicJsonType , typename CharType > template<typename C  = CharType, enable_if_t< std::is_unsigned< C >::value > *  = nullptr> static constexpr CharType \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::to_char_type (std::uint8_t x)\fC [inline]\fP, \fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.SS "template<typename BasicJsonType , typename CharType > \fBvoid\fP \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::write_bson (const BasicJsonType & j)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBPrecondition\fP
.RS 4
j\&.type() == \fBvalue_t::object\fP 
.RE
.PP

.SS "template<typename BasicJsonType , typename CharType > \fBvoid\fP \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::write_cbor (const BasicJsonType & j)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP

.SS "template<typename BasicJsonType , typename CharType > \fBvoid\fP \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::write_msgpack (const BasicJsonType & j)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP

.SS "template<typename BasicJsonType , typename CharType > \fBvoid\fP \fBnlohmann::detail::binary_writer\fP< BasicJsonType, CharType >::write_ubjson (const BasicJsonType & j, const bool use_count, const bool use_type, const bool add_prefix = \fCtrue\fP)\fC [inline]\fP"

.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.br
\fIuse_count\fP whether to use '#' prefixes (optimized format) 
.br
\fIuse_type\fP whether to use '$' prefixes (optimized format) 
.br
\fIadd_prefix\fP whether prefixes need to be used for this value 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Forge from the source code\&.
