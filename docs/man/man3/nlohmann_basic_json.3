.TH "nlohmann::basic_json" 3 "Sat Apr 4 2020" "Version 0.1.0" "Forge" \" -*- nroff -*-
.ad l
.nh
.SH NAME
nlohmann::basic_json \- a class to store JSON values  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <json\&.hpp>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "using \fBvalue_t\fP = \fBdetail::value_t\fP"
.br
.ti -1c
.RI "using \fBjson_pointer\fP = ::\fBnlohmann::json_pointer\fP< \fBbasic_json\fP >"
.br
.RI "JSON Pointer, see \fBnlohmann::json_pointer\fP\&. "
.ti -1c
.RI "template<typename T , typename SFINAE > using \fBjson_serializer\fP = JSONSerializer< T, SFINAE >"
.br
.ti -1c
.RI "using \fBerror_handler_t\fP = \fBdetail::error_handler_t\fP"
.br
.RI "how to treat decoding errors "
.ti -1c
.RI "using \fBinitializer_list_t\fP = std::initializer_list< \fBdetail::json_ref\fP< \fBbasic_json\fP > >"
.br
.RI "helper type for initializer lists of \fBbasic_json\fP values "
.ti -1c
.RI "using \fBinput_format_t\fP = \fBdetail::input_format_t\fP"
.br
.ti -1c
.RI "using \fBjson_sax_t\fP = \fBjson_sax\fP< \fBbasic_json\fP >"
.br
.RI "SAX interface type, see \fBnlohmann::json_sax\fP\&. "
.ti -1c
.RI "using \fBparse_event_t\fP = typename \fBparser::parse_event_t\fP"
.br
.RI "parser event types "
.ti -1c
.RI "using \fBparser_callback_t\fP = typename \fBparser::parser_callback_t\fP"
.br
.RI "per-element parser callback type "
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "const \fBJSON_HEDLEY_RETURNS_NON_NULL\fP char * \fBtype_name\fP () const noexcept"
.br
.RI "return the type as string "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBallocator_type\fP \fBget_allocator\fP ()"
.br
.RI "returns the allocator associated with the container "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBmeta\fP ()"
.br
.RI "returns version information on the library "
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<detail::value_t > struct \fBdetail::external_constructor\fP"
.br
.ti -1c
.RI "template<typename BasicJsonType > class \fB::nlohmann::detail::iter_impl\fP"
.br
.ti -1c
.RI "template<typename BasicJsonType , typename CharType > class \fB::nlohmann::detail::binary_writer\fP"
.br
.ti -1c
.RI "template<typename BasicJsonType , typename SAX > class \fB::nlohmann::detail::binary_reader\fP"
.br
.ti -1c
.RI "template<typename BasicJsonType > class \fB::nlohmann::detail::json_sax_dom_parser\fP"
.br
.ti -1c
.RI "template<typename BasicJsonType > class \fB::nlohmann::detail::json_sax_dom_callback_parser\fP"
.br
.in -1c
.SS "exceptions"
Classes to implement user-defined exceptions\&. 
.in +1c
.ti -1c
.RI "using \fBexception\fP = \fBdetail::exception\fP"
.br
.RI "general exception of the \fBbasic_json\fP class "
.ti -1c
.RI "using \fBparse_error\fP = \fBdetail::parse_error\fP"
.br
.RI "exception indicating a parse error "
.ti -1c
.RI "using \fBinvalid_iterator\fP = \fBdetail::invalid_iterator\fP"
.br
.RI "exception indicating errors with iterators "
.ti -1c
.RI "using \fBtype_error\fP = \fBdetail::type_error\fP"
.br
.RI "exception indicating executing a member function with a wrong type "
.ti -1c
.RI "using \fBout_of_range\fP = \fBdetail::out_of_range\fP"
.br
.RI "exception indicating access out of the defined range "
.ti -1c
.RI "using \fBother_error\fP = \fBdetail::other_error\fP"
.br
.RI "exception indicating other library errors "
.in -1c
.SS "container types"
The canonic container types to use \fBbasic_json\fP like any other STL container\&. 
.in +1c
.ti -1c
.RI "using \fBvalue_type\fP = \fBbasic_json\fP"
.br
.RI "the type of elements in a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBreference\fP = \fBvalue_type\fP &"
.br
.RI "the type of an element reference "
.ti -1c
.RI "using \fBconst_reference\fP = const \fBvalue_type\fP &"
.br
.RI "the type of an element const reference "
.ti -1c
.RI "using \fBdifference_type\fP = std::ptrdiff_t"
.br
.RI "a type to represent differences between iterators "
.ti -1c
.RI "using \fBsize_type\fP = std::size_t"
.br
.RI "a type to represent container sizes "
.ti -1c
.RI "using \fBallocator_type\fP = AllocatorType< \fBbasic_json\fP >"
.br
.RI "the allocator type "
.ti -1c
.RI "using \fBpointer\fP = typename std::allocator_traits< \fBallocator_type\fP >::\fBpointer\fP"
.br
.RI "the type of an element pointer "
.ti -1c
.RI "using \fBconst_pointer\fP = typename std::allocator_traits< \fBallocator_type\fP >::\fBconst_pointer\fP"
.br
.RI "the type of an element const pointer "
.ti -1c
.RI "using \fBiterator\fP = \fBiter_impl\fP< \fBbasic_json\fP >"
.br
.RI "an iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBconst_iterator\fP = \fBiter_impl\fP< const \fBbasic_json\fP >"
.br
.RI "a const iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBreverse_iterator\fP = \fBjson_reverse_iterator\fP< typename \fBbasic_json::iterator\fP >"
.br
.RI "a reverse iterator for a \fBbasic_json\fP container "
.ti -1c
.RI "using \fBconst_reverse_iterator\fP = \fBjson_reverse_iterator\fP< typename \fBbasic_json::const_iterator\fP >"
.br
.RI "a const reverse iterator for a \fBbasic_json\fP container "
.in -1c
.SS "JSON value data types"
The data types to store a JSON value\&. These types are derived from the template arguments passed to class \fBbasic_json\fP\&. 
.in +1c
.ti -1c
.RI "using \fBobject_comparator_t\fP = std::less< StringType >"
.br
.ti -1c
.RI "using \fBobject_t\fP = ObjectType< StringType, \fBbasic_json\fP, \fBobject_comparator_t\fP, AllocatorType< std::pair< const StringType, \fBbasic_json\fP > >>"
.br
.RI "a type for an object "
.ti -1c
.RI "using \fBarray_t\fP = ArrayType< \fBbasic_json\fP, AllocatorType< \fBbasic_json\fP > >"
.br
.RI "a type for an array "
.ti -1c
.RI "using \fBstring_t\fP = StringType"
.br
.RI "a type for a string "
.ti -1c
.RI "using \fBboolean_t\fP = BooleanType"
.br
.RI "a type for a boolean "
.ti -1c
.RI "using \fBnumber_integer_t\fP = NumberIntegerType"
.br
.RI "a type for a number (integer) "
.ti -1c
.RI "using \fBnumber_unsigned_t\fP = NumberUnsignedType"
.br
.RI "a type for a number (unsigned) "
.ti -1c
.RI "using \fBnumber_float_t\fP = NumberFloatType"
.br
.RI "a type for a number (floating-point) "
.in -1c
.SS "constructors and destructors"
Constructors of class \fBbasic_json\fP, copy/move constructor, copy assignment, static functions creating objects, and the destructor\&. 
.in +1c
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBarray\fP (\fBinitializer_list_t\fP init={})"
.br
.RI "explicitly create an array from an initializer list "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBobject\fP (\fBinitializer_list_t\fP init={})"
.br
.RI "explicitly create an object from an initializer list "
.ti -1c
.RI "\fBbasic_json\fP (const \fBvalue_t\fP v)"
.br
.RI "create an empty value with a given type "
.ti -1c
.RI "\fBbasic_json\fP (std::nullptr_t=nullptr) noexcept"
.br
.RI "create a null object "
.ti -1c
.RI "template<typename CompatibleType , typename U  = detail::uncvref_t<CompatibleType>, detail::enable_if_t< not detail::is_basic_json< U >::value and detail::is_compatible_type< basic_json_t, U >::value, int >  = 0> \fBbasic_json\fP (CompatibleType &&val) noexcept(noexcept(JSONSerializer< U >::to_json(std::declval< basic_json_t & >(), std::forward< CompatibleType >(val))))"
.br
.RI "create a JSON value "
.ti -1c
.RI "template<typename BasicJsonType , detail::enable_if_t< detail::is_basic_json< BasicJsonType >::value and not std::is_same< basic_json, BasicJsonType >::value, int >  = 0> \fBbasic_json\fP (const BasicJsonType &val)"
.br
.RI "create a JSON value from an existing one "
.ti -1c
.RI "\fBbasic_json\fP (\fBinitializer_list_t\fP init, bool type_deduction=true, \fBvalue_t\fP manual_type=\fBvalue_t::array\fP)"
.br
.RI "create a container (array or object) from an initializer list "
.ti -1c
.RI "\fBbasic_json\fP (\fBsize_type\fP cnt, const \fBbasic_json\fP &val)"
.br
.RI "construct an array with count copies of given value "
.ti -1c
.RI "template<class InputIT , typename std::enable_if< std::is_same< InputIT, typename basic_json_t::iterator >::value or std::is_same< InputIT, typename basic_json_t::const_iterator >::value, int >::type  = 0> \fBbasic_json\fP (InputIT first, InputIT last)"
.br
.RI "construct a JSON container given an iterator range "
.ti -1c
.RI "\fBbasic_json\fP (const \fBbasic_json\fP &other)"
.br
.RI "copy constructor "
.ti -1c
.RI "\fBbasic_json\fP (\fBbasic_json\fP &&other) noexcept"
.br
.RI "move constructor "
.ti -1c
.RI "\fBbasic_json\fP & \fBoperator=\fP (\fBbasic_json\fP other) noexcept(std::is_nothrow_move_constructible< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_constructible< json_value >::\fBvalue\fP and std::is_nothrow_move_assignable< json_value >::\fBvalue\fP)"
.br
.RI "copy assignment "
.ti -1c
.RI "\fB~basic_json\fP () noexcept"
.br
.RI "destructor "
.in -1c
.SS "object inspection"
Functions to inspect the type of a JSON value\&. 
.in +1c
.ti -1c
.RI "\fBstring_t\fP \fBdump\fP (const int indent=\-1, const char indent_char=' ', const bool ensure_ascii=false, const \fBerror_handler_t\fP error_handler=error_handler_t::strict) const"
.br
.RI "serialization "
.ti -1c
.RI "constexpr \fBvalue_t\fP \fBtype\fP () const noexcept"
.br
.RI "return the type of the JSON value (explicit) "
.ti -1c
.RI "constexpr bool \fBis_primitive\fP () const noexcept"
.br
.RI "return whether type is primitive "
.ti -1c
.RI "constexpr bool \fBis_structured\fP () const noexcept"
.br
.RI "return whether type is structured "
.ti -1c
.RI "constexpr bool \fBis_null\fP () const noexcept"
.br
.RI "return whether value is null "
.ti -1c
.RI "constexpr bool \fBis_boolean\fP () const noexcept"
.br
.RI "return whether value is a boolean "
.ti -1c
.RI "constexpr bool \fBis_number\fP () const noexcept"
.br
.RI "return whether value is a number "
.ti -1c
.RI "constexpr bool \fBis_number_integer\fP () const noexcept"
.br
.RI "return whether value is an integer number "
.ti -1c
.RI "constexpr bool \fBis_number_unsigned\fP () const noexcept"
.br
.RI "return whether value is an unsigned integer number "
.ti -1c
.RI "constexpr bool \fBis_number_float\fP () const noexcept"
.br
.RI "return whether value is a floating-point number "
.ti -1c
.RI "constexpr bool \fBis_object\fP () const noexcept"
.br
.RI "return whether value is an object "
.ti -1c
.RI "constexpr bool \fBis_array\fP () const noexcept"
.br
.RI "return whether value is an array "
.ti -1c
.RI "constexpr bool \fBis_string\fP () const noexcept"
.br
.RI "return whether value is a string "
.ti -1c
.RI "constexpr bool \fBis_discarded\fP () const noexcept"
.br
.RI "return whether value is discarded "
.ti -1c
.RI "constexpr \fBoperator value_t\fP () const noexcept"
.br
.RI "return the type of the JSON value (implicit) "
.in -1c
.SS "value access"
Direct access to the stored value of a JSON value\&. 
.in +1c
.ti -1c
.RI "template<typename BasicJsonType , detail::enable_if_t< std::is_same< typename std::remove_const< BasicJsonType >::type, basic_json_t >::value, int >  = 0> \fBbasic_json\fP \fBget\fP () const"
.br
.RI "get special-case overload "
.ti -1c
.RI "template<typename BasicJsonType , detail::enable_if_t< not std::is_same< BasicJsonType, basic_json >::value and detail::is_basic_json< BasicJsonType >::value, int >  = 0> BasicJsonType \fBget\fP () const"
.br
.RI "get special-case overload "
.ti -1c
.RI "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not detail::is_basic_json< ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value and not detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBget\fP () const noexcept(noexcept(JSONSerializer< ValueType >::from_json(std::declval< const basic_json_t & >(), std::declval< ValueType & >())))"
.br
.RI "get a value (explicit) "
.ti -1c
.RI "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType \fBget\fP () const noexcept(noexcept(JSONSerializer< ValueType >::from_json(std::declval< const basic_json_t & >())))"
.br
.RI "get a value (explicit); special case "
.ti -1c
.RI "template<typename ValueType , detail::enable_if_t< not detail::is_basic_json< ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType & \fBget_to\fP (ValueType &v) const noexcept(noexcept(JSONSerializer< ValueType >::from_json(std::declval< const basic_json_t & >(), v)))"
.br
.RI "get a value (explicit) "
.ti -1c
.RI "template<typename T , std::size_t N, typename Array  = T (&)[N], detail::enable_if_t< detail::has_from_json< basic_json_t, Array >::value, int >  = 0> Array \fBget_to\fP (T(&v)[N]) const noexcept(noexcept(JSONSerializer< Array >::from_json(std::declval< const basic_json_t & >(), v)))"
.br
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> auto \fBget_ptr\fP () noexcept \-> decltype(std::declval< basic_json_t & >()\&.get_impl_ptr(std::declval< PointerType >()))"
.br
.RI "get a pointer value (implicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value and std::is_const< typename std::remove_pointer< PointerType >::type >::value, int >::type  = 0> constexpr auto \fBget_ptr\fP () const noexcept \-> decltype(std::declval< const basic_json_t & >()\&.get_impl_ptr(std::declval< PointerType >()))"
.br
.RI "get a pointer value (implicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> auto \fBget\fP () noexcept \-> decltype(std::declval< basic_json_t & >()\&.template \fBget_ptr\fP< PointerType >())"
.br
.RI "get a pointer value (explicit) "
.ti -1c
.RI "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> constexpr auto \fBget\fP () const noexcept \-> decltype(std::declval< const basic_json_t & >()\&.template \fBget_ptr\fP< PointerType >())"
.br
.RI "get a pointer value (explicit) "
.ti -1c
.RI "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value, int >::type  = 0> ReferenceType \fBget_ref\fP ()"
.br
.RI "get a reference value (implicit) "
.ti -1c
.RI "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value and std::is_const< typename std::remove_reference< ReferenceType >::type >::value, int >::type  = 0> ReferenceType \fBget_ref\fP () const"
.br
.RI "get a reference value (implicit) "
.ti -1c
.RI "template<typename ValueType , typename std::enable_if< not std::is_pointer< ValueType >::value and not std::is_same< ValueType, detail::json_ref< basic_json >>::value and not std::is_same< ValueType, typename string_t::value_type >::value and not detail::is_basic_json< ValueType >::value and not std::is_same< ValueType, std::initializer_list< typename string_t::value_type >>::value and not std::is_same< ValueType, typename std::string_view >::value and detail::is_detected< detail::get_template_function, const basic_json_t &, ValueType >::value, int >::type  = 0> \fBoperator ValueType\fP () const"
.br
.RI "get a value (implicit) "
.in -1c
.SS "element access"
Access to the JSON value\&. 
.in +1c
.ti -1c
.RI "\fBreference\fP \fBat\fP (\fBsize_type\fP idx)"
.br
.RI "access specified array element with bounds checking "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (\fBsize_type\fP idx) const"
.br
.RI "access specified array element with bounds checking "
.ti -1c
.RI "\fBreference\fP \fBat\fP (const typename object_t::key_type &key)"
.br
.RI "access specified object element with bounds checking "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (const typename object_t::key_type &key) const"
.br
.RI "access specified object element with bounds checking "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (\fBsize_type\fP idx)"
.br
.RI "access specified array element "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (\fBsize_type\fP idx) const"
.br
.RI "access specified array element "
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (const typename object_t::key_type &key)"
.br
.RI "access specified object element "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (const typename object_t::key_type &key) const"
.br
.RI "read-only access specified object element "
.ti -1c
.RI "template<typename T > \fBreference\fP \fBoperator[]\fP (T *key)"
.br
.RI "access specified object element "
.ti -1c
.RI "template<typename T > \fBconst_reference\fP \fBoperator[]\fP (T *key) const"
.br
.RI "read-only access specified object element "
.ti -1c
.RI "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBvalue\fP (const typename object_t::key_type &key, const ValueType &default_value) const"
.br
.RI "access specified object element with default value "
.ti -1c
.RI "\fBstring_t\fP \fBvalue\fP (const typename object_t::key_type &key, const char *default_value) const"
.br
.RI "overload for a default value of type const char* "
.ti -1c
.RI "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType \fBvalue\fP (const \fBjson_pointer\fP &ptr, const ValueType &default_value) const"
.br
.RI "access specified object element via JSON Pointer with default value "
.ti -1c
.RI "\fBstring_t\fP \fBvalue\fP (const \fBjson_pointer\fP &ptr, const char *default_value) const"
.br
.RI "overload for a default value of type const char* "
.ti -1c
.RI "\fBreference\fP \fBfront\fP ()"
.br
.RI "access the first element "
.ti -1c
.RI "\fBconst_reference\fP \fBfront\fP () const"
.br
.RI "access the first element "
.ti -1c
.RI "\fBreference\fP \fBback\fP ()"
.br
.RI "access the last element "
.ti -1c
.RI "\fBconst_reference\fP \fBback\fP () const"
.br
.RI "access the last element "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBerase\fP (IteratorType pos)"
.br
.RI "remove element given an iterator "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType \fBerase\fP (IteratorType first, IteratorType last)"
.br
.RI "remove elements given an iterator range "
.ti -1c
.RI "\fBsize_type\fP \fBerase\fP (const typename object_t::key_type &key)"
.br
.RI "remove element from a JSON object given a key "
.ti -1c
.RI "void \fBerase\fP (const \fBsize_type\fP idx)"
.br
.RI "remove element from a JSON array given an index "
.in -1c
.SS "lookup"

.in +1c
.ti -1c
.RI "template<typename KeyT > \fBiterator\fP \fBfind\fP (KeyT &&key)"
.br
.RI "find an element in a JSON object "
.ti -1c
.RI "template<typename KeyT > \fBconst_iterator\fP \fBfind\fP (KeyT &&key) const"
.br
.RI "find an element in a JSON object "
.ti -1c
.RI "template<typename KeyT > \fBsize_type\fP \fBcount\fP (KeyT &&key) const"
.br
.RI "returns the number of occurrences of a key in a JSON object "
.ti -1c
.RI "template<typename KeyT , typename std::enable_if< not std::is_same< typename std::decay< KeyT >::type, json_pointer >::value, int >::type  = 0> bool \fBcontains\fP (KeyT &&key) const"
.br
.RI "check the existence of an element in a JSON object "
.ti -1c
.RI "bool \fBcontains\fP (const \fBjson_pointer\fP &ptr) const"
.br
.RI "check the existence of an element in a JSON object given a JSON pointer "
.in -1c
.SS "iterators"

.in +1c
.ti -1c
.RI "static \fBiteration_proxy\fP< \fBiterator\fP > \fBiterator_wrapper\fP (\fBreference\fP ref) noexcept"
.br
.RI "wrapper to access iterator member functions in range-based for "
.ti -1c
.RI "static \fBiteration_proxy\fP< \fBconst_iterator\fP > \fBiterator_wrapper\fP (\fBconst_reference\fP ref) noexcept"
.br
.RI "wrapper to access iterator member functions in range-based for "
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP () noexcept"
.br
.RI "returns an iterator to the first element "
.ti -1c
.RI "\fBconst_iterator\fP \fBbegin\fP () const noexcept"
.br
.RI "returns a const iterator to the first element "
.ti -1c
.RI "\fBconst_iterator\fP \fBcbegin\fP () const noexcept"
.br
.RI "returns a const iterator to the first element "
.ti -1c
.RI "\fBiterator\fP \fBend\fP () noexcept"
.br
.RI "returns an iterator to one past the last element "
.ti -1c
.RI "\fBconst_iterator\fP \fBend\fP () const noexcept"
.br
.RI "returns a const iterator to one past the last element "
.ti -1c
.RI "\fBconst_iterator\fP \fBcend\fP () const noexcept"
.br
.RI "returns a const iterator to one past the last element "
.ti -1c
.RI "\fBreverse_iterator\fP \fBrbegin\fP () noexcept"
.br
.RI "returns an iterator to the reverse-beginning "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrbegin\fP () const noexcept"
.br
.RI "returns a const reverse iterator to the last element "
.ti -1c
.RI "\fBreverse_iterator\fP \fBrend\fP () noexcept"
.br
.RI "returns an iterator to the reverse-end "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBrend\fP () const noexcept"
.br
.RI "returns a const reverse iterator to one before the first "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrbegin\fP () const noexcept"
.br
.RI "returns a const reverse iterator to the last element "
.ti -1c
.RI "\fBconst_reverse_iterator\fP \fBcrend\fP () const noexcept"
.br
.RI "returns a const reverse iterator to one before the first "
.ti -1c
.RI "\fBiteration_proxy\fP< \fBiterator\fP > \fBitems\fP () noexcept"
.br
.RI "helper to access iterator member functions in range-based for "
.ti -1c
.RI "\fBiteration_proxy\fP< \fBconst_iterator\fP > \fBitems\fP () const noexcept"
.br
.RI "helper to access iterator member functions in range-based for "
.in -1c
.SS "capacity"

.in +1c
.ti -1c
.RI "bool \fBempty\fP () const noexcept"
.br
.RI "checks whether the container is empty\&. "
.ti -1c
.RI "\fBsize_type\fP \fBsize\fP () const noexcept"
.br
.RI "returns the number of elements "
.ti -1c
.RI "\fBsize_type\fP \fBmax_size\fP () const noexcept"
.br
.RI "returns the maximum possible number of elements "
.in -1c
.SS "modifiers"

.in +1c
.ti -1c
.RI "void \fBclear\fP () noexcept"
.br
.RI "clears the contents "
.ti -1c
.RI "void \fBpush_back\fP (\fBbasic_json\fP &&val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (\fBbasic_json\fP &&val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "void \fBpush_back\fP (const \fBbasic_json\fP &val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (const \fBbasic_json\fP &val)"
.br
.RI "add an object to an array "
.ti -1c
.RI "void \fBpush_back\fP (const typename object_t::value_type &val)"
.br
.RI "add an object to an object "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (const typename object_t::value_type &val)"
.br
.RI "add an object to an object "
.ti -1c
.RI "void \fBpush_back\fP (\fBinitializer_list_t\fP init)"
.br
.RI "add an object to an object "
.ti -1c
.RI "\fBreference\fP \fBoperator+=\fP (\fBinitializer_list_t\fP init)"
.br
.RI "add an object to an object "
.ti -1c
.RI "template<class\&.\&.\&. Args> \fBreference\fP \fBemplace_back\fP (Args &&\&.\&.\&. args)"
.br
.RI "add an object to an array "
.ti -1c
.RI "template<class\&.\&.\&. Args> std::pair< \fBiterator\fP, bool > \fBemplace\fP (Args &&\&.\&.\&. args)"
.br
.RI "add an object to an object if key does not exist "
.ti -1c
.RI "template<typename\&.\&.\&. Args> \fBiterator\fP \fBinsert_iterator\fP (\fBconst_iterator\fP pos, Args &&\&.\&.\&. args)"
.br
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, const \fBbasic_json\fP &val)"
.br
.RI "inserts element "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBbasic_json\fP &&val)"
.br
.RI "inserts element "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBsize_type\fP cnt, const \fBbasic_json\fP &val)"
.br
.RI "inserts elements "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBconst_iterator\fP first, \fBconst_iterator\fP last)"
.br
.RI "inserts elements "
.ti -1c
.RI "\fBiterator\fP \fBinsert\fP (\fBconst_iterator\fP pos, \fBinitializer_list_t\fP ilist)"
.br
.RI "inserts elements "
.ti -1c
.RI "void \fBinsert\fP (\fBconst_iterator\fP first, \fBconst_iterator\fP last)"
.br
.RI "inserts elements "
.ti -1c
.RI "void \fBupdate\fP (\fBconst_reference\fP j)"
.br
.RI "updates a JSON object from another object, overwriting existing keys "
.ti -1c
.RI "void \fBupdate\fP (\fBconst_iterator\fP first, \fBconst_iterator\fP last)"
.br
.RI "updates a JSON object from another object, overwriting existing keys "
.ti -1c
.RI "void \fBswap\fP (\fBreference\fP other) noexcept(std::is_nothrow_move_constructible< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_assignable< \fBvalue_t\fP >::\fBvalue\fP and std::is_nothrow_move_constructible< json_value >::\fBvalue\fP and std::is_nothrow_move_assignable< json_value >::\fBvalue\fP)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBarray_t\fP &other)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBobject_t\fP &other)"
.br
.RI "exchanges the values "
.ti -1c
.RI "void \fBswap\fP (\fBstring_t\fP &other)"
.br
.RI "exchanges the values "
.in -1c
.SS "lexicographical comparison operators"

.in +1c
.ti -1c
.RI "bool \fBoperator==\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator==\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator==\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: equal "
.ti -1c
.RI "bool \fBoperator!=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator!=\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator!=\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: not equal "
.ti -1c
.RI "bool \fBoperator<\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator<\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: less than "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator<\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than "
.ti -1c
.RI "bool \fBoperator<=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than or equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator<=\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: less than or equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator<=\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: less than or equal "
.ti -1c
.RI "bool \fBoperator>\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator>\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: greater than "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator>\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than "
.ti -1c
.RI "bool \fBoperator>=\fP (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than or equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator>=\fP (\fBconst_reference\fP lhs, const ScalarType rhs) noexcept"
.br
.RI "comparison: greater than or equal "
.ti -1c
.RI "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool \fBoperator>=\fP (const ScalarType lhs, \fBconst_reference\fP rhs) noexcept"
.br
.RI "comparison: greater than or equal "
.in -1c
.SS "serialization"

.in +1c
.ti -1c
.RI "std::ostream & \fBoperator<<\fP (std::ostream &o, const \fBbasic_json\fP &j)"
.br
.RI "serialize to stream "
.ti -1c
.RI "std::ostream & \fBoperator>>\fP (const \fBbasic_json\fP &j, std::ostream &o)"
.br
.RI "serialize to stream "
.in -1c
.SS "deserialization"

.in +1c
.ti -1c
.RI "std::istream & \fBoperator<<\fP (\fBbasic_json\fP &j, std::istream &i)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "std::istream & \fBoperator>>\fP (std::istream &i, \fBbasic_json\fP &j)"
.br
.RI "deserialize from stream "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBparse\fP (\fBdetail::input_adapter\fP &&i, const \fBparser_callback_t\fP cb=nullptr, const bool allow_exceptions=true)"
.br
.RI "deserialize from a compatible input "
.ti -1c
.RI "static bool \fBaccept\fP (\fBdetail::input_adapter\fP &&i)"
.br
.ti -1c
.RI "template<typename SAX > static bool \fBsax_parse\fP (\fBdetail::input_adapter\fP &&i, SAX *sax, \fBinput_format_t\fP format=\fBinput_format_t::json\fP, const bool strict=true)"
.br
.RI "generate SAX events "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP \fBparse\fP (IteratorType first, IteratorType last, const \fBparser_callback_t\fP cb=nullptr, const bool allow_exceptions=true)"
.br
.RI "deserialize from an iterator range with contiguous storage "
.ti -1c
.RI "template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static bool \fBaccept\fP (IteratorType first, IteratorType last)"
.br
.ti -1c
.RI "template<class IteratorType , class SAX , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static bool \fBsax_parse\fP (IteratorType first, IteratorType last, SAX *sax)"
.br
.in -1c
.SS "binary serialization/deserialization support"

.in +1c
.ti -1c
.RI "static std::vector< uint8_t > \fBto_cbor\fP (const \fBbasic_json\fP &j)"
.br
.RI "create a CBOR serialization of a given JSON value "
.ti -1c
.RI "static void \fBto_cbor\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< uint8_t > o)"
.br
.ti -1c
.RI "static void \fBto_cbor\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< char > o)"
.br
.ti -1c
.RI "static std::vector< uint8_t > \fBto_msgpack\fP (const \fBbasic_json\fP &j)"
.br
.RI "create a MessagePack serialization of a given JSON value "
.ti -1c
.RI "static void \fBto_msgpack\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< uint8_t > o)"
.br
.ti -1c
.RI "static void \fBto_msgpack\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< char > o)"
.br
.ti -1c
.RI "static std::vector< uint8_t > \fBto_ubjson\fP (const \fBbasic_json\fP &j, const bool use_size=false, const bool use_type=false)"
.br
.RI "create a UBJSON serialization of a given JSON value "
.ti -1c
.RI "static void \fBto_ubjson\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< uint8_t > o, const bool use_size=false, const bool use_type=false)"
.br
.ti -1c
.RI "static void \fBto_ubjson\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< char > o, const bool use_size=false, const bool use_type=false)"
.br
.ti -1c
.RI "static std::vector< uint8_t > \fBto_bson\fP (const \fBbasic_json\fP &j)"
.br
.RI "Serializes the given JSON object \fCj\fP to BSON and returns a vector containing the corresponding BSON-representation\&. "
.ti -1c
.RI "static void \fBto_bson\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< uint8_t > o)"
.br
.RI "Serializes the given JSON object \fCj\fP to BSON and forwards the corresponding BSON-representation to the given output_adapter \fCo\fP\&. "
.ti -1c
.RI "static void \fBto_bson\fP (const \fBbasic_json\fP &j, \fBdetail::output_adapter\fP< char > o)"
.br
.RI "Serializes the given JSON object \fCj\fP to BSON and forwards the corresponding BSON-representation to the given output_adapter \fCo\fP\&. "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_cbor\fP (\fBdetail::input_adapter\fP &&i, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in CBOR format "
.ti -1c
.RI "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_cbor\fP (A1 &&a1, A2 &&a2, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in CBOR format "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_msgpack\fP (\fBdetail::input_adapter\fP &&i, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in MessagePack format "
.ti -1c
.RI "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_msgpack\fP (A1 &&a1, A2 &&a2, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in MessagePack format "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_ubjson\fP (\fBdetail::input_adapter\fP &&i, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in UBJSON format "
.ti -1c
.RI "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_ubjson\fP (A1 &&a1, A2 &&a2, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "create a JSON value from an input in UBJSON format "
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_bson\fP (\fBdetail::input_adapter\fP &&i, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "Create a JSON value from an input in BSON format\&. "
.ti -1c
.RI "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBfrom_bson\fP (A1 &&a1, A2 &&a2, const bool strict=true, const bool allow_exceptions=true)"
.br
.RI "Create a JSON value from an input in BSON format\&. "
.in -1c
.SS "JSON Pointer functions"

.in +1c
.ti -1c
.RI "\fBreference\fP \fBoperator[]\fP (const \fBjson_pointer\fP &ptr)"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBconst_reference\fP \fBoperator[]\fP (const \fBjson_pointer\fP &ptr) const"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBreference\fP \fBat\fP (const \fBjson_pointer\fP &ptr)"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBconst_reference\fP \fBat\fP (const \fBjson_pointer\fP &ptr) const"
.br
.RI "access specified element via JSON Pointer "
.ti -1c
.RI "\fBbasic_json\fP \fBflatten\fP () const"
.br
.RI "return flattened JSON value "
.ti -1c
.RI "\fBbasic_json\fP \fBunflatten\fP () const"
.br
.RI "unflatten a previously flattened JSON value "
.in -1c
.SS "JSON Patch functions"

.in +1c
.ti -1c
.RI "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP \fBdiff\fP (const \fBbasic_json\fP &source, const \fBbasic_json\fP &target, const std::string &path='')"
.br
.RI "creates a diff as a JSON patch "
.ti -1c
.RI "\fBbasic_json\fP \fBpatch\fP (const \fBbasic_json\fP &json_patch) const"
.br
.RI "applies a JSON patch "
.in -1c
.SS "JSON Merge Patch functions"

.in +1c
.ti -1c
.RI "void \fBmerge_patch\fP (const \fBbasic_json\fP &apply_patch)"
.br
.RI "applies a JSON Merge Patch "
.in -1c
.SH "Detailed Description"
.PP 
a class to store JSON values 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIObjectType\fP type for JSON objects (\fCstd::map\fP by default; will be used in \fBobject_t\fP) 
.br
\fIArrayType\fP type for JSON arrays (\fCstd::vector\fP by default; will be used in \fBarray_t\fP) 
.br
\fIStringType\fP type for JSON strings and object keys (\fCstd::string\fP by default; will be used in \fBstring_t\fP) 
.br
\fIBooleanType\fP type for JSON booleans (\fCbool\fP by default; will be used in \fBboolean_t\fP) 
.br
\fINumberIntegerType\fP type for JSON integer numbers (\fCint64_t\fP by default; will be used in \fBnumber_integer_t\fP) 
.br
\fINumberUnsignedType\fP type for JSON unsigned integer numbers (\fC\fCuint64_t\fP\fP by default; will be used in \fBnumber_unsigned_t\fP) 
.br
\fINumberFloatType\fP type for JSON floating-point numbers (\fCdouble\fP by default; will be used in \fBnumber_float_t\fP) 
.br
\fIAllocatorType\fP type of the allocator to use (\fCstd::allocator\fP by default) 
.br
\fIJSONSerializer\fP the serializer to resolve internal calls to \fC\fBto_json()\fP\fP and \fC\fBfrom_json()\fP\fP (\fBadl_serializer\fP by default)
.RE
.PP
@requirement The class satisfies the following concept requirements:
.IP "\(bu" 2
Basic
.IP "  \(bu" 4
\fCDefaultConstructible\fP: JSON values can be default constructed\&. The result will be a JSON null value\&.
.IP "  \(bu" 4
\fCMoveConstructible\fP: A JSON value can be constructed from an rvalue argument\&.
.IP "  \(bu" 4
\fCCopyConstructible\fP: A JSON value can be copy-constructed from an lvalue expression\&.
.IP "  \(bu" 4
\fCMoveAssignable\fP: A JSON value van be assigned from an rvalue argument\&.
.IP "  \(bu" 4
\fCCopyAssignable\fP: A JSON value can be copy-assigned from an lvalue expression\&.
.IP "  \(bu" 4
\fCDestructible\fP: JSON values can be destructed\&.
.PP

.IP "\(bu" 2
Layout
.IP "  \(bu" 4
\fCStandardLayoutType\fP: JSON values have \fCstandard layout\fP: All non-static data members are private and standard layout types, the class has no virtual functions or (virtual) base classes\&.
.PP

.IP "\(bu" 2
Library-wide
.IP "  \(bu" 4
\fCEqualityComparable\fP: JSON values can be compared with \fC==\fP, see \fBoperator==(const_reference,const_reference)\fP\&.
.IP "  \(bu" 4
\fCLessThanComparable\fP: JSON values can be compared with \fC<\fP, see \fBoperator<(const_reference,const_reference)\fP\&.
.IP "  \(bu" 4
\fCSwappable\fP: Any JSON lvalue or rvalue of can be swapped with any lvalue or rvalue of other compatible types, using unqualified function call \fBswap()\fP\&.
.IP "  \(bu" 4
\fCNullablePointer\fP: JSON values can be compared against \fCstd::nullptr_t\fP objects which are used to model the \fCnull\fP value\&.
.PP

.IP "\(bu" 2
Container
.IP "  \(bu" 4
\fCContainer\fP: JSON values can be used like STL containers and provide iterator access\&.
.IP "  \(bu" 4
\fCReversibleContainer\fP; JSON values can be used like STL containers and provide reverse iterator access\&.
.PP

.PP
.PP
\fBInvariant\fP
.RS 4
The member variables \fIm_value\fP and \fIm_type\fP have the following relationship:
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::object\fP\fP, then \fCm_value\&.object != nullptr\fP\&.
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::array\fP\fP, then \fCm_value\&.array != nullptr\fP\&.
.IP "\(bu" 2
If \fCm_type == \fBvalue_t::string\fP\fP, then \fCm_value\&.string != nullptr\fP\&. The invariants are checked by member function assert_invariant()\&.
.PP
.RE
.PP
\fBSee also\fP
.RS 4
\fCRFC 7159: The JavaScript Object Notation (JSON) Data Interchange Format\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "using \fBnlohmann::basic_json::allocator_type\fP =  AllocatorType<\fBbasic_json\fP>"

.PP
the allocator type 
.SS "using \fBnlohmann::basic_json::array_t\fP =  ArrayType<\fBbasic_json\fP, AllocatorType<\fBbasic_json\fP> >"

.PP
a type for an array \fCRFC 7159\fP describes JSON arrays as follows: 
.PP
.RS 4
An array is an ordered sequence of zero or more values\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameters explained below\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIArrayType\fP container type to store arrays (e\&.g\&., \fCstd::vector\fP or \fCstd::list\fP) 
.br
\fIAllocatorType\fP allocator to use for arrays (e\&.g\&., \fCstd::allocator\fP)
.RE
.PP
.SS "Default type"
With the default values for \fIArrayType\fP (\fCstd::vector\fP) and \fIAllocatorType\fP (\fCstd::allocator\fP), the default value for \fIarray_t\fP is:
.PP
.PP
.nf
std::vector<
  basic_json, // value_type
  std::allocator<basic_json> // allocator_type
>
.fi
.PP
.SS "Limits"
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the maximum depth of nesting\&. 
.RE
.PP
.PP
In this class, the array's limit of nesting is not explicitly constrained\&. However, a maximum depth of nesting may be introduced by the compiler or runtime environment\&. A theoretical limit can be queried by calling the \fBmax_size\fP function of a JSON array\&.
.SS "Storage"
Arrays are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to array values, a pointer of type \fCarray_t*\fP must be dereferenced\&.
.PP
\fBSee also\fP
.RS 4
\fBobject_t\fP -- \fBtype\fP for an \fBobject\fP \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::boolean_t\fP =  BooleanType"

.PP
a type for a boolean \fCRFC 7159\fP implicitly describes a boolean as a type which differentiates the two literals \fCtrue\fP and \fCfalse\fP\&.
.PP
To store objects in C++, a type is defined by the template parameter \fIBooleanType\fP which chooses the type to use\&.
.SS "Default type"
With the default values for \fIBooleanType\fP (\fCbool\fP), the default value for \fIboolean_t\fP is:
.PP
.PP
.nf
bool
.fi
.PP
.SS "Storage"
Boolean values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::const_iterator\fP =  \fBiter_impl\fP<const \fBbasic_json\fP>"

.PP
a const iterator for a \fBbasic_json\fP container 
.SS "using \fBnlohmann::basic_json::const_pointer\fP =  typename std::allocator_traits<\fBallocator_type\fP>::\fBconst_pointer\fP"

.PP
the type of an element const pointer 
.SS "using \fBnlohmann::basic_json::const_reference\fP =  const \fBvalue_type\fP&"

.PP
the type of an element const reference 
.SS "using \fBnlohmann::basic_json::const_reverse_iterator\fP =  \fBjson_reverse_iterator\fP<typename \fBbasic_json::const_iterator\fP>"

.PP
a const reverse iterator for a \fBbasic_json\fP container 
.SS "using \fBnlohmann::basic_json::difference_type\fP =  std::ptrdiff_t"

.PP
a type to represent differences between iterators 
.SS "using \fBnlohmann::basic_json::error_handler_t\fP =  \fBdetail::error_handler_t\fP"

.PP
how to treat decoding errors 
.SS "using \fBnlohmann::basic_json::exception\fP =  \fBdetail::exception\fP"

.PP
general exception of the \fBbasic_json\fP class This class is an extension of \fCstd::exception\fP objects with a member \fIid\fP for exception ids\&. It is used as the base class for all exceptions thrown by the \fBbasic_json\fP class\&. This class can hence be used as 'wildcard' to catch exceptions\&.
.PP
Subclasses:
.IP "\(bu" 2
\fBparse_error\fP for exceptions indicating a parse error
.IP "\(bu" 2
\fBinvalid_iterator\fP for exceptions indicating errors with iterators
.IP "\(bu" 2
\fBtype_error\fP for exceptions indicating executing a member function with a wrong type
.IP "\(bu" 2
\fBout_of_range\fP for exceptions indicating access out of the defined range
.IP "\(bu" 2
\fBother_error\fP for exceptions indicating other library errors
.PP
.PP
@liveexample{The following code shows how arbitrary library exceptions can be caught\&.,exception}
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::initializer_list_t\fP =  std::initializer_list<\fBdetail::json_ref\fP<\fBbasic_json\fP> >"

.PP
helper type for initializer lists of \fBbasic_json\fP values 
.SS "using \fBnlohmann::basic_json::input_format_t\fP =  \fBdetail::input_format_t\fP"

.SS "using \fBnlohmann::basic_json::invalid_iterator\fP =  \fBdetail::invalid_iterator\fP"

.PP
exception indicating errors with iterators This exception is thrown if iterators passed to a library function do not match the expected semantics\&.
.PP
Exceptions have ids 2xx\&.
.PP
name / id example message description  json\&.exception\&.invalid_iterator\&.201 iterators are not compatible The iterators passed to constructor \fBbasic_json(InputIT first, InputIT last)\fP are not compatible, meaning they do not belong to the same container\&. Therefore, the range (\fIfirst\fP, \fIlast\fP) is invalid\&.  json\&.exception\&.invalid_iterator\&.202 iterator does not fit current value In an erase or insert function, the passed iterator \fIpos\fP does not belong to the JSON value for which the function was called\&. It hence does not define a valid position for the deletion/insertion\&.  json\&.exception\&.invalid_iterator\&.203 iterators do not fit current value Either iterator passed to function \fBerase(IteratorType first, IteratorType last)\fP does not belong to the JSON value from which values shall be erased\&. It hence does not define a valid range to delete values from\&.  json\&.exception\&.invalid_iterator\&.204 iterators out of range When an iterator range for a primitive type (number, boolean, or string) is passed to a constructor or an erase function, this range has to be exactly (\fBbegin()\fP, \fBend()\fP), because this is the only way the single stored value is expressed\&. All other ranges are invalid\&.  json\&.exception\&.invalid_iterator\&.205 iterator out of range When an iterator for a primitive type (number, boolean, or string) is passed to an erase function, the iterator has to be the \fBbegin()\fP iterator, because it is the only way to address the stored value\&. All other iterators are invalid\&.  json\&.exception\&.invalid_iterator\&.206 cannot construct with iterators from null The iterators passed to constructor \fBbasic_json(InputIT first, InputIT last)\fP belong to a JSON null value and hence to not define a valid range\&.  json\&.exception\&.invalid_iterator\&.207 cannot use key() for non-object iterators The key() member function can only be used on iterators belonging to a JSON object, because other types do not have a concept of a key\&.  json\&.exception\&.invalid_iterator\&.208 cannot use operator[] for object iterators The operator[] to specify a concrete offset cannot be used on iterators belonging to a JSON object, because JSON objects are unordered\&.  json\&.exception\&.invalid_iterator\&.209 cannot use offsets with object iterators The offset operators (+, -, +=, -=) cannot be used on iterators belonging to a JSON object, because JSON objects are unordered\&.  json\&.exception\&.invalid_iterator\&.210 iterators do not fit The iterator range passed to the insert function are not compatible, meaning they do not belong to the same container\&. Therefore, the range (\fIfirst\fP, \fIlast\fP) is invalid\&.  json\&.exception\&.invalid_iterator\&.211 passed iterators may not belong to container The iterator range passed to the insert function must not be a subrange of the container to insert to\&.  json\&.exception\&.invalid_iterator\&.212 cannot compare iterators of different containers When two iterators are compared, they must belong to the same container\&.  json\&.exception\&.invalid_iterator\&.213 cannot compare order of object iterators The order of object iterators cannot be compared, because JSON objects are unordered\&.  json\&.exception\&.invalid_iterator\&.214 cannot get value Cannot get value for iterator: Either the iterator belongs to a null value or it is an iterator to a primitive type (number, boolean, or string), but the iterator is different to \fBbegin()\fP\&.  
.PP
@liveexample{The following code shows how an \fCinvalid_iterator\fP exception can be caught\&.,invalid_iterator}
.PP
\fBSee also\fP
.RS 4
- \fBexception\fP for the base class of the library exceptions 
.PP
- \fBparse_error\fP for exceptions indicating a \fBparse\fP \fBerror\fP 
.PP
- \fBtype_error\fP for exceptions indicating executing a member function with a wrong \fBtype\fP 
.PP
- \fBout_of_range\fP for exceptions indicating access out of the defined range 
.PP
- \fBother_error\fP for exceptions indicating other library errors
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::iterator\fP =  \fBiter_impl\fP<\fBbasic_json\fP>"

.PP
an iterator for a \fBbasic_json\fP container 
.SS "using \fBnlohmann::basic_json::json_pointer\fP =  ::\fBnlohmann::json_pointer\fP<\fBbasic_json\fP>"

.PP
JSON Pointer, see \fBnlohmann::json_pointer\fP\&. 
.SS "using \fBnlohmann::basic_json::json_sax_t\fP =  \fBjson_sax\fP<\fBbasic_json\fP>"

.PP
SAX interface type, see \fBnlohmann::json_sax\fP\&. 
.SS "template<typename T , typename SFINAE > using \fBnlohmann::basic_json::json_serializer\fP =  JSONSerializer<T, SFINAE>"

.SS "using \fBnlohmann::basic_json::number_float_t\fP =  NumberFloatType"

.PP
a type for a number (floating-point) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store floating-point numbers in C++, a type is defined by the template parameter \fINumberFloatType\fP which chooses the type to use\&.
.SS "Default type"
With the default values for \fINumberFloatType\fP (\fCdouble\fP), the default value for \fInumber_float_t\fP is:
.PP
.PP
.nf
double
.fi
.PP
.SS "Default behavior"
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in floating-point literals will be ignored\&. Internally, the value will be stored as decimal number\&. For instance, the C++ floating-point literal \fC01\&.2\fP will be serialized to \fC1\&.2\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.SS "Limits"
\fCRFC 7159\fP states: 
.PP
.RS 4
This specification allows implementations to set limits on the range and precision of numbers accepted\&. Since software that implements IEEE 754-2008 binary64 (double precision) numbers is generally available and widely used, good interoperability can be achieved by implementations that expect no more precision or range than these provide, in the sense that implementations will approximate JSON numbers within the expected precision\&. 
.RE
.PP
.PP
This implementation does exactly follow this approach, as it uses double precision floating-point numbers\&. Note values smaller than \fC-1\&.79769313486232e+308\fP and values greater than \fC1\&.79769313486232e+308\fP will be stored as NaN internally and be serialized to \fCnull\fP\&.
.SS "Storage"
Floating-point number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also\fP
.RS 4
\fBnumber_integer_t\fP -- \fBtype\fP for number values (integer)
.PP
\fBnumber_unsigned_t\fP -- \fBtype\fP for number values (unsigned integer)
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::number_integer_t\fP =  NumberIntegerType"

.PP
a type for a number (integer) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store integer numbers in C++, a type is defined by the template parameter \fINumberIntegerType\fP which chooses the type to use\&.
.SS "Default type"
With the default values for \fINumberIntegerType\fP (\fCint64_t\fP), the default value for \fInumber_integer_t\fP is:
.PP
.PP
.nf
int64_t
.fi
.PP
.SS "Default behavior"
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in integer literals lead to an interpretation as octal number\&. Internally, the value will be stored as decimal number\&. For instance, the C++ integer literal \fC010\fP will be serialized to \fC8\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.SS "Limits"
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the range and precision of numbers\&. 
.RE
.PP
.PP
When the default type is used, the maximal integer number that can be stored is \fC9223372036854775807\fP (INT64_MAX) and the minimal integer number that can be stored is \fC-9223372036854775808\fP (INT64_MIN)\&. Integer numbers that are out of range will yield over/underflow when used in a constructor\&. During deserialization, too large or small integer numbers will be automatically be stored as \fBnumber_unsigned_t\fP or \fBnumber_float_t\fP\&.
.PP
\fCRFC 7159\fP further states: 
.PP
.RS 4
Note that when such software is used, numbers that are integers and are in the range $[-2^{53}+1, 2^{53}-1]$ are interoperable in the sense that implementations will agree exactly on their numeric values\&. 
.RE
.PP
.PP
As this range is a subrange of the exactly supported range [INT64_MIN, INT64_MAX], this class's integer type is interoperable\&.
.SS "Storage"
Integer number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also\fP
.RS 4
\fBnumber_float_t\fP -- \fBtype\fP for number values (floating-point)
.PP
\fBnumber_unsigned_t\fP -- \fBtype\fP for number values (unsigned integer)
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::number_unsigned_t\fP =  NumberUnsignedType"

.PP
a type for a number (unsigned) \fCRFC 7159\fP describes numbers as follows: 
.PP
.RS 4
The representation of numbers is similar to that used in most programming languages\&. A number is represented in base 10 using decimal digits\&. It contains an integer component that may be prefixed with an optional minus sign, which may be followed by a fraction part and/or an exponent part\&. Leading zeros are not allowed\&. (\&.\&.\&.) Numeric values that cannot be represented in the grammar below (such as Infinity and NaN) are not permitted\&. 
.RE
.PP
.PP
This description includes both integer and floating-point numbers\&. However, C++ allows more precise storage if it is known whether the number is a signed integer, an unsigned integer or a floating-point number\&. Therefore, three different types, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP and \fBnumber_float_t\fP are used\&.
.PP
To store unsigned integer numbers in C++, a type is defined by the template parameter \fINumberUnsignedType\fP which chooses the type to use\&.
.SS "Default type"
With the default values for \fINumberUnsignedType\fP (\fCuint64_t\fP), the default value for \fInumber_unsigned_t\fP is:
.PP
.PP
.nf
uint64_t
.fi
.PP
.SS "Default behavior"
.IP "\(bu" 2
The restrictions about leading zeros is not enforced in C++\&. Instead, leading zeros in integer literals lead to an interpretation as octal number\&. Internally, the value will be stored as decimal number\&. For instance, the C++ integer literal \fC010\fP will be serialized to \fC8\fP\&. During deserialization, leading zeros yield an error\&.
.IP "\(bu" 2
Not-a-number (NaN) values will be serialized to \fCnull\fP\&.
.PP
.SS "Limits"
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the range and precision of numbers\&. 
.RE
.PP
.PP
When the default type is used, the maximal integer number that can be stored is \fC18446744073709551615\fP (UINT64_MAX) and the minimal integer number that can be stored is \fC0\fP\&. Integer numbers that are out of range will yield over/underflow when used in a constructor\&. During deserialization, too large or small integer numbers will be automatically be stored as \fBnumber_integer_t\fP or \fBnumber_float_t\fP\&.
.PP
\fCRFC 7159\fP further states: 
.PP
.RS 4
Note that when such software is used, numbers that are integers and are in the range $[-2^{53}+1, 2^{53}-1]$ are interoperable in the sense that implementations will agree exactly on their numeric values\&. 
.RE
.PP
.PP
As this range is a subrange (when considered in conjunction with the number_integer_t type) of the exactly supported range [0, UINT64_MAX], this class's integer type is interoperable\&.
.SS "Storage"
Integer number values are stored directly inside a \fBbasic_json\fP type\&.
.PP
\fBSee also\fP
.RS 4
\fBnumber_float_t\fP -- \fBtype\fP for number values (floating-point) 
.PP
\fBnumber_integer_t\fP -- \fBtype\fP for number values (integer)
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::object_comparator_t\fP =  std::less<StringType>"

.SS "using \fBnlohmann::basic_json::object_t\fP =  ObjectType<StringType, \fBbasic_json\fP, \fBobject_comparator_t\fP, AllocatorType<std::pair<const StringType, \fBbasic_json\fP> >>"

.PP
a type for an object \fCRFC 7159\fP describes JSON objects as follows: 
.PP
.RS 4
An object is an unordered collection of zero or more name/value pairs, where a name is a string and a value is a string, number, boolean, null, object, or array\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameters described below\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIObjectType\fP the container to store objects (e\&.g\&., \fCstd::map\fP or \fCstd::unordered_map\fP) 
.br
\fIStringType\fP the type of the keys or names (e\&.g\&., \fCstd::string\fP)\&. The comparison function \fCstd::less<StringType>\fP is used to order elements inside the container\&. 
.br
\fIAllocatorType\fP the allocator to use for objects (e\&.g\&., \fCstd::allocator\fP)
.RE
.PP
.SS "Default type"
With the default values for \fIObjectType\fP (\fCstd::map\fP), \fIStringType\fP (\fCstd::string\fP), and \fIAllocatorType\fP (\fCstd::allocator\fP), the default value for \fIobject_t\fP is:
.PP
.PP
.nf
std::map<
  std::string, // key_type
  basic_json, // value_type
  std::less<std::string>, // key_compare
  std::allocator<std::pair<const std::string, basic_json>> // allocator_type
>
.fi
.PP
.SS "Behavior"
The choice of \fIobject_t\fP influences the behavior of the JSON class\&. With the default type, objects have the following behavior:
.PP
.IP "\(bu" 2
When all names are unique, objects will be interoperable in the sense that all software implementations receiving that object will agree on the name-value mappings\&.
.IP "\(bu" 2
When the names within an object are not unique, it is unspecified which one of the values for a given key will be chosen\&. For instance, \fC{'key': 2, 'key': 1}\fP could be equal to either \fC{'key': 1}\fP or \fC{'key': 2}\fP\&.
.IP "\(bu" 2
Internally, name/value pairs are stored in lexicographical order of the names\&. Objects will also be serialized (see \fBdump\fP) in this order\&. For instance, \fC{'b': 1, 'a': 2}\fP and \fC{'a': 2, 'b': 1}\fP will be stored and serialized as \fC{'a': 2, 'b': 1}\fP\&.
.IP "\(bu" 2
When comparing objects, the order of the name/value pairs is irrelevant\&. This makes objects interoperable in the sense that they will not be affected by these differences\&. For instance, \fC{'b': 1, 'a': 2}\fP and \fC{'a': 2, 'b': 1}\fP will be treated as equal\&.
.PP
.SS "Limits"
\fCRFC 7159\fP specifies: 
.PP
.RS 4
An implementation may set limits on the maximum depth of nesting\&. 
.RE
.PP
.PP
In this class, the object's limit of nesting is not explicitly constrained\&. However, a maximum depth of nesting may be introduced by the compiler or runtime environment\&. A theoretical limit can be queried by calling the \fBmax_size\fP function of a JSON object\&.
.SS "Storage"
Objects are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to object values, a pointer of type \fCobject_t*\fP must be dereferenced\&.
.PP
\fBSee also\fP
.RS 4
\fBarray_t\fP -- \fBtype\fP for an \fBarray\fP \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
\fBNote\fP
.RS 4
The order name/value pairs are added to the object is \fInot\fP preserved by the library\&. Therefore, iterating an object may return name/value pairs in a different order than they were originally stored\&. In fact, keys will be traversed in alphabetical order as \fCstd::map\fP with \fCstd::less\fP is used by default\&. Please note this behavior conforms to \fCRFC 7159\fP, because any order implements the specified 'unordered' nature of JSON objects\&. 
.RE
.PP

.SS "using \fBnlohmann::basic_json::other_error\fP =  \fBdetail::other_error\fP"

.PP
exception indicating other library errors This exception is thrown in case of errors that cannot be classified with the other exception types\&.
.PP
Exceptions have ids 5xx\&.
.PP
name / id example message description  json\&.exception\&.other_error\&.501 unsuccessful: {'op':'test','path':'/baz', 'value':'bar'} A JSON Patch operation 'test' failed\&. The unsuccessful operation is also printed\&.  
.PP
\fBSee also\fP
.RS 4
- \fBexception\fP for the base class of the library exceptions 
.PP
- \fBparse_error\fP for exceptions indicating a \fBparse\fP \fBerror\fP 
.PP
- \fBinvalid_iterator\fP for exceptions indicating errors with iterators 
.PP
- \fBtype_error\fP for exceptions indicating executing a member function with a wrong \fBtype\fP 
.PP
- \fBout_of_range\fP for exceptions indicating access out of the defined range
.RE
.PP
@liveexample{The following code shows how an \fCother_error\fP exception can be caught\&.,other_error}
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::out_of_range\fP =  \fBdetail::out_of_range\fP"

.PP
exception indicating access out of the defined range This exception is thrown in case a library function is called on an input parameter that exceeds the expected range, for instance in case of array indices or nonexisting object keys\&.
.PP
Exceptions have ids 4xx\&.
.PP
name / id example message description  json\&.exception\&.out_of_range\&.401 array index 3 is out of range The provided array index \fIi\fP is larger than \fIsize-1\fP\&.  json\&.exception\&.out_of_range\&.402 array index '-' (3) is out of range The special array index \fC-\fP in a JSON Pointer never describes a valid element of the array, but the index past the end\&. That is, it can only be used to add elements at this position, but not to read it\&.  json\&.exception\&.out_of_range\&.403 key 'foo' not found The provided key was not found in the JSON object\&.  json\&.exception\&.out_of_range\&.404 unresolved reference token 'foo' A reference token in a JSON Pointer could not be resolved\&.  json\&.exception\&.out_of_range\&.405 JSON pointer has no parent The JSON Patch operations 'remove' and 'add' can not be applied to the root element of the JSON value\&.  json\&.exception\&.out_of_range\&.406 number overflow parsing '10E1000' A parsed number could not be stored as without changing it to NaN or INF\&.  json\&.exception\&.out_of_range\&.407 number overflow serializing '9223372036854775808' UBJSON and BSON only support integer numbers up to 9223372036854775807\&.  json\&.exception\&.out_of_range\&.408 excessive array size: 8658170730974374167 The size (following \fC#\fP) of an UBJSON array or object exceeds the maximal capacity\&.  json\&.exception\&.out_of_range\&.409 BSON key cannot contain code point U+0000 (at byte 2) Key identifiers to be serialized to BSON cannot contain code point U+0000, since the key is stored as zero-terminated c-string  
.PP
@liveexample{The following code shows how an \fCout_of_range\fP exception can be caught\&.,out_of_range}
.PP
\fBSee also\fP
.RS 4
- \fBexception\fP for the base class of the library exceptions 
.PP
- \fBparse_error\fP for exceptions indicating a \fBparse\fP \fBerror\fP 
.PP
- \fBinvalid_iterator\fP for exceptions indicating errors with iterators 
.PP
- \fBtype_error\fP for exceptions indicating executing a member function with a wrong \fBtype\fP 
.PP
- \fBother_error\fP for exceptions indicating other library errors
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::parse_error\fP =  \fBdetail::parse_error\fP"

.PP
exception indicating a parse error This exception is thrown by the library when a parse error occurs\&. Parse errors can occur during the deserialization of JSON text, CBOR, MessagePack, as well as when using JSON Patch\&.
.PP
Member \fIbyte\fP holds the byte index of the last read character in the input file\&.
.PP
Exceptions have ids 1xx\&.
.PP
name / id example message description  json\&.exception\&.parse_error\&.101 parse error at 2: unexpected end of input; expected string literal This error indicates a syntax error while deserializing a JSON text\&. The error message describes that an unexpected token (character) was encountered, and the member \fIbyte\fP indicates the error position\&.  json\&.exception\&.parse_error\&.102 parse error at 14: missing or wrong low surrogate JSON uses the \fC\\uxxxx\fP format to describe Unicode characters\&. Code points above above 0xFFFF are split into two \fC\\uxxxx\fP entries ('surrogate pairs')\&. This error indicates that the surrogate pair is incomplete or contains an invalid code point\&.  json\&.exception\&.parse_error\&.103 parse error: code points above 0x10FFFF are invalid Unicode supports code points up to 0x10FFFF\&. Code points above 0x10FFFF are invalid\&.  json\&.exception\&.parse_error\&.104 parse error: JSON patch must be an array of objects \fCRFC 6902\fP requires a JSON Patch document to be a JSON document that represents an array of objects\&.  json\&.exception\&.parse_error\&.105 parse error: operation must have string member 'op' An operation of a JSON Patch document must contain exactly one 'op' member, whose value indicates the operation to perform\&. Its value must be one of 'add', 'remove', 'replace', 'move', 'copy', or 'test'; other values are errors\&.  json\&.exception\&.parse_error\&.106 parse error: array index '01' must not begin with '0' An array index in a JSON Pointer (\fCRFC 6901\fP) may be \fC0\fP or any number without a leading \fC0\fP\&.  json\&.exception\&.parse_error\&.107 parse error: JSON pointer must be empty or begin with '/' - was: 'foo' A JSON Pointer must be a Unicode string containing a sequence of zero or more reference tokens, each prefixed by a \fC/\fP character\&.  json\&.exception\&.parse_error\&.108 parse error: escape character '~' must be followed with '0' or '1' In a JSON Pointer, only \fC~0\fP and \fC~1\fP are valid escape sequences\&.  json\&.exception\&.parse_error\&.109 parse error: array index 'one' is not a number A JSON Pointer array index must be a number\&.  json\&.exception\&.parse_error\&.110 parse error at 1: cannot read 2 bytes from vector When parsing CBOR or MessagePack, the byte vector ends before the complete value has been read\&.  json\&.exception\&.parse_error\&.112 parse error at 1: error reading CBOR; last byte: 0xF8 Not all types of CBOR or MessagePack are supported\&. This exception occurs if an unsupported byte was read\&.  json\&.exception\&.parse_error\&.113 parse error at 2: expected a CBOR string; last byte: 0x98 While parsing a map key, a value that is not a string has been read\&.  json\&.exception\&.parse_error\&.114 parse error: Unsupported BSON record type 0x0F The parsing of the corresponding BSON record type is not implemented (yet)\&.  
.PP
\fBNote\fP
.RS 4
For an input with n bytes, 1 is the index of the first character and n+1 is the index of the terminating null byte or the end of file\&. This also holds true when reading a byte vector (CBOR or MessagePack)\&.
.RE
.PP
@liveexample{The following code shows how a \fCparse_error\fP exception can be caught\&.,parse_error}
.PP
\fBSee also\fP
.RS 4
- \fBexception\fP for the base class of the library exceptions 
.PP
- \fBinvalid_iterator\fP for exceptions indicating errors with iterators 
.PP
- \fBtype_error\fP for exceptions indicating executing a member function with a wrong \fBtype\fP 
.PP
- \fBout_of_range\fP for exceptions indicating access out of the defined range 
.PP
- \fBother_error\fP for exceptions indicating other library errors
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::parse_event_t\fP =  typename \fBparser::parse_event_t\fP"

.PP
parser event types The parser callback distinguishes the following events:
.IP "\(bu" 2
\fCobject_start\fP: the parser read \fC{\fP and started to process a JSON object
.IP "\(bu" 2
\fCkey\fP: the parser read a key of a value in an object
.IP "\(bu" 2
\fCobject_end\fP: the parser read \fC}\fP and finished processing a JSON object
.IP "\(bu" 2
\fCarray_start\fP: the parser read \fC[\fP and started to process a JSON array
.IP "\(bu" 2
\fCarray_end\fP: the parser read \fC]\fP and finished processing a JSON array
.IP "\(bu" 2
\fCvalue\fP: the parser finished reading a JSON value
.PP
.PP
Example when certain parse events are triggered
.PP
\fBSee also\fP
.RS 4
\fBparser_callback_t\fP for more information and examples 
.RE
.PP

.SS "using \fBnlohmann::basic_json::parser_callback_t\fP =  typename \fBparser::parser_callback_t\fP"

.PP
per-element parser callback type With a parser callback function, the result of parsing a JSON text can be influenced\&. When passed to \fBparse\fP, it is called on certain events (passed as \fBparse_event_t\fP via parameter \fIevent\fP) with a set recursion depth \fIdepth\fP and context JSON value \fIparsed\fP\&. The return value of the callback function is a boolean indicating whether the element that emitted the callback shall be kept or not\&.
.PP
We distinguish six scenarios (determined by the event type) in which the callback function can be called\&. The following table describes the values of the parameters \fIdepth\fP, \fIevent\fP, and \fIparsed\fP\&.
.PP
parameter \fIevent\fP  description parameter \fIdepth\fP  parameter \fIparsed\fP   parse_event_t::object_start the parser read \fC{\fP and started to process a JSON object depth of the parent of the JSON object a JSON value with type discarded  parse_event_t::key the parser read a key of a value in an object depth of the currently parsed JSON object a JSON string containing the key  parse_event_t::object_end the parser read \fC}\fP and finished processing a JSON object depth of the parent of the JSON object the parsed JSON object  parse_event_t::array_start the parser read \fC[\fP and started to process a JSON array depth of the parent of the JSON array a JSON value with type discarded  parse_event_t::array_end the parser read \fC]\fP and finished processing a JSON array depth of the parent of the JSON array the parsed JSON array  parse_event_t::value the parser finished reading a JSON value depth of the value the parsed JSON value  
.PP
Example when certain parse events are triggered
.PP
Discarding a value (i\&.e\&., returning \fCfalse\fP) has different effects depending on the context in which function was called:
.PP
.IP "\(bu" 2
Discarded values in structured types are skipped\&. That is, the parser will behave as if the discarded value was never read\&.
.IP "\(bu" 2
In case a value outside a structured type is skipped, it is replaced with \fCnull\fP\&. This case happens if the top-level element is skipped\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIdepth\fP the depth of the recursion during parsing
.br
\fIevent\fP an event of type parse_event_t indicating the context in the callback function has been called
.br
\fIparsed\fP the current intermediate parse result; note that writing to this value has no effect for parse_event_t::key events
.RE
.PP
\fBReturns\fP
.RS 4
Whether the JSON value which called the function during parsing should be kept (\fCtrue\fP) or not (\fCfalse\fP)\&. In the latter case, it is either skipped completely or replaced by an empty discarded object\&.
.RE
.PP
\fBSee also\fP
.RS 4
\fBparse\fP for examples
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::pointer\fP =  typename std::allocator_traits<\fBallocator_type\fP>::\fBpointer\fP"

.PP
the type of an element pointer 
.SS "using \fBnlohmann::basic_json::reference\fP =  \fBvalue_type\fP&"

.PP
the type of an element reference 
.SS "using \fBnlohmann::basic_json::reverse_iterator\fP =  \fBjson_reverse_iterator\fP<typename \fBbasic_json::iterator\fP>"

.PP
a reverse iterator for a \fBbasic_json\fP container 
.SS "using \fBnlohmann::basic_json::size_type\fP =  std::size_t"

.PP
a type to represent container sizes 
.SS "using \fBnlohmann::basic_json::string_t\fP =  StringType"

.PP
a type for a string \fCRFC 7159\fP describes JSON strings as follows: 
.PP
.RS 4
A string is a sequence of zero or more Unicode characters\&. 
.RE
.PP
.PP
To store objects in C++, a type is defined by the template parameter described below\&. Unicode values are split by the JSON class into byte-sized characters during deserialization\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIStringType\fP the container to store strings (e\&.g\&., \fCstd::string\fP)\&. Note this container is used for keys/names in objects, see \fBobject_t\fP\&.
.RE
.PP
.SS "Default type"
With the default values for \fIStringType\fP (\fCstd::string\fP), the default value for \fIstring_t\fP is:
.PP
.PP
.nf
std::string
.fi
.PP
.SS "Encoding"
Strings are stored in UTF-8 encoding\&. Therefore, functions like \fCstd::string::size()\fP or \fCstd::string::length()\fP return the number of bytes in the string rather than the number of characters or glyphs\&.
.SS "String comparison"
\fCRFC 7159\fP states: 
.PP
.RS 4
Software implementations are typically required to test names of object members for equality\&. Implementations that transform the textual representation into sequences of Unicode code units and then perform the comparison numerically, code unit by code unit, are interoperable in the sense that implementations will agree in all cases on equality or inequality of two strings\&. For example, implementations that compare strings with escaped characters unconverted may incorrectly find that \fC'a\\\\b'\fP and \fC'a\\u005Cb'\fP are not equal\&. 
.RE
.PP
.PP
This implementation is interoperable as it does compare strings code unit by code unit\&.
.SS "Storage"
String values are stored as pointers in a \fBbasic_json\fP type\&. That is, for any access to string values, a pointer of type \fCstring_t*\fP must be dereferenced\&.
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::type_error\fP =  \fBdetail::type_error\fP"

.PP
exception indicating executing a member function with a wrong type This exception is thrown in case of a type error; that is, a library function is executed on a JSON value whose type does not match the expected semantics\&.
.PP
Exceptions have ids 3xx\&.
.PP
name / id example message description  json\&.exception\&.type_error\&.301 cannot create object from initializer list To create an object from an initializer list, the initializer list must consist only of a list of pairs whose first element is a string\&. When this constraint is violated, an array is created instead\&.  json\&.exception\&.type_error\&.302 type must be object, but is array During implicit or explicit value conversion, the JSON type must be compatible to the target type\&. For instance, a JSON string can only be converted into string types, but not into numbers or boolean types\&.  json\&.exception\&.type_error\&.303 incompatible ReferenceType for get_ref, actual type is object To retrieve a reference to a value stored in a \fBbasic_json\fP object with \fBget_ref\fP, the type of the reference must match the value type\&. For instance, for a JSON array, the \fIReferenceType\fP must be \fBarray_t\fP &\&.  json\&.exception\&.type_error\&.304 cannot use \fBat()\fP with string The \fBat()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.305 cannot use operator[] with string The \fBoperator[]\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.306 cannot use \fBvalue()\fP with string The \fBvalue()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.307 cannot use \fBerase()\fP with string The \fBerase()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.308 cannot use \fBpush_back()\fP with string The \fBpush_back()\fP and \fBoperator+=\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.309 cannot use \fBinsert()\fP with The \fBinsert()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.310 cannot use \fBswap()\fP with number The \fBswap()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.311 cannot use \fBemplace_back()\fP with string The \fBemplace_back()\fP member function can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.312 cannot use \fBupdate()\fP with string The \fBupdate()\fP member functions can only be executed for certain JSON types\&.  json\&.exception\&.type_error\&.313 invalid value to unflatten The \fBunflatten\fP function converts an object whose keys are JSON Pointers back into an arbitrary nested JSON value\&. The JSON Pointers must not overlap, because then the resulting value would not be well defined\&.  json\&.exception\&.type_error\&.314 only objects can be unflattened The \fBunflatten\fP function only works for an object whose keys are JSON Pointers\&.  json\&.exception\&.type_error\&.315 values in object must be primitive The \fBunflatten\fP function only works for an object whose keys are JSON Pointers and whose values are primitive\&.  json\&.exception\&.type_error\&.316 invalid UTF-8 byte at index 10: 0x7E The \fBdump\fP function only works with UTF-8 encoded strings; that is, if you assign a \fCstd::string\fP to a JSON value, make sure it is UTF-8 encoded\&.  json\&.exception\&.type_error\&.317 JSON value cannot be serialized to requested format The dynamic type of the object cannot be represented in the requested serialization format (e\&.g\&. a raw \fCtrue\fP or \fCnull\fP JSON object cannot be serialized to BSON)  
.PP
@liveexample{The following code shows how a \fCtype_error\fP exception can be caught\&.,type_error}
.PP
\fBSee also\fP
.RS 4
- \fBexception\fP for the base class of the library exceptions 
.PP
- \fBparse_error\fP for exceptions indicating a \fBparse\fP \fBerror\fP 
.PP
- \fBinvalid_iterator\fP for exceptions indicating errors with iterators 
.PP
- \fBout_of_range\fP for exceptions indicating access out of the defined range 
.PP
- \fBother_error\fP for exceptions indicating other library errors
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "using \fBnlohmann::basic_json::value_t\fP =  \fBdetail::value_t\fP"

.SS "using \fBnlohmann::basic_json::value_type\fP =  \fBbasic_json\fP"

.PP
the type of elements in a \fBbasic_json\fP container 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "nlohmann::basic_json::basic_json (const \fBvalue_t\fP v)\fC [inline]\fP"

.PP
create an empty value with a given type Create an empty JSON value with a given type\&. The value will be default initialized with an empty value which depends on the type:
.PP
Value type initial value  null \fCnull\fP  boolean \fCfalse\fP  string \fC''\fP  number \fC0\fP  object \fC{}\fP  array \fC[]\fP  
.PP
\fBParameters\fP
.RS 4
\fIv\fP the type of the value to create
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The following code shows the constructor for different \fBvalue_t\fP values,basic_json__value_t}
.PP
\fBSee also\fP
.RS 4
\fBclear()\fP -- restores the postcondition of this constructor
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "nlohmann::basic_json::basic_json (std::nullptr_t = \fCnullptr\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
create a null object Create a \fCnull\fP JSON value\&. It either takes a null pointer as parameter (explicitly creating \fCnull\fP) or no parameter (implicitly creating \fCnull\fP)\&. The passed null pointer itself is not read -- it is only used to choose the right constructor\&.
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this constructor never throws exceptions\&.
.PP
@liveexample{The following code shows the constructor with and without a null pointer parameter\&.,basic_json__nullptr_t}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename CompatibleType , typename U  = detail::uncvref_t<CompatibleType>, detail::enable_if_t< not detail::is_basic_json< U >::value and detail::is_compatible_type< basic_json_t, U >::value, int >  = 0> nlohmann::basic_json::basic_json (CompatibleType && val)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
create a JSON value This is a 'catch all' constructor for all compatible JSON types; that is, types for which a \fC\fBto_json()\fP\fP method exists\&. The constructor forwards the parameter \fIval\fP to that method (to \fCjson_serializer<U>::to_json\fP method with \fCU = uncvref_t<CompatibleType>\fP, to be exact)\&.
.PP
Template type \fICompatibleType\fP includes, but is not limited to, the following types:
.IP "\(bu" 2
\fBarrays\fP: \fBarray_t\fP and all kinds of compatible containers such as \fCstd::vector\fP, \fCstd::deque\fP, \fCstd::list\fP, \fCstd::forward_list\fP, \fCstd::array\fP, \fCstd::valarray\fP, \fCstd::set\fP, \fCstd::unordered_set\fP, \fCstd::multiset\fP, and \fCstd::unordered_multiset\fP with a \fCvalue_type\fP from which a \fBbasic_json\fP value can be constructed\&.
.IP "\(bu" 2
\fBobjects\fP: \fBobject_t\fP and all kinds of compatible associative containers such as \fCstd::map\fP, \fCstd::unordered_map\fP, \fCstd::multimap\fP, and \fCstd::unordered_multimap\fP with a \fCkey_type\fP compatible to \fBstring_t\fP and a \fCvalue_type\fP from which a \fBbasic_json\fP value can be constructed\&.
.IP "\(bu" 2
\fBstrings\fP: \fBstring_t\fP, string literals, and all compatible string containers can be used\&.
.IP "\(bu" 2
\fBnumbers\fP: \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, \fBnumber_float_t\fP, and all convertible number types such as \fCint\fP, \fCsize_t\fP, \fCint64_t\fP, \fCfloat\fP or \fCdouble\fP can be used\&.
.IP "\(bu" 2
\fBboolean\fP: \fBboolean_t\fP / \fCbool\fP can be used\&.
.PP
.PP
See the examples below\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fICompatibleType\fP a type such that:
.IP "\(bu" 2
\fICompatibleType\fP is not derived from \fCstd::istream\fP,
.IP "\(bu" 2
\fICompatibleType\fP is not \fBbasic_json\fP (to avoid hijacking copy/move constructors),
.IP "\(bu" 2
\fICompatibleType\fP is not a different \fBbasic_json\fP type (i\&.e\&. with different template arguments)
.IP "\(bu" 2
\fICompatibleType\fP is not a \fBbasic_json\fP nested type (e\&.g\&., \fBjson_pointer\fP, \fBiterator\fP, etc \&.\&.\&.)
.IP "\(bu" 2
\fBjson_serializer\fI\fP\fP has a \fCto_json(basic_json_t&, CompatibleType&&)\fP method
.PP
.br
\fIU\fP = \fCuncvref_t<CompatibleType>\fP
.RE
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to be forwarded to the respective constructor
.RE
.PP
@complexity Usually linear in the size of the passed \fIval\fP, also depending on the implementation of the called \fC\fBto_json()\fP\fP method\&.
.PP
@exceptionsafety Depends on the called constructor\&. For types directly supported by the library (i\&.e\&., all types for which no \fC\fBto_json()\fP\fP function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The following code shows the constructor with several compatible types\&.,basic_json__CompatibleType}
.PP
\fBSince\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<typename BasicJsonType , detail::enable_if_t< detail::is_basic_json< BasicJsonType >::value and not std::is_same< basic_json, BasicJsonType >::value, int >  = 0> nlohmann::basic_json::basic_json (const BasicJsonType & val)\fC [inline]\fP"

.PP
create a JSON value from an existing one This is a constructor for existing \fBbasic_json\fP types\&. It does not hijack copy/move constructors, since the parameter has different template arguments than the current ones\&.
.PP
The constructor tries to convert the internal \fBm_value\fP of the parameter\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIBasicJsonType\fP a type such that:
.IP "\(bu" 2
\fIBasicJsonType\fP is a \fBbasic_json\fP type\&.
.IP "\(bu" 2
\fIBasicJsonType\fP has different template arguments than \fBbasic_json_t\fP\&.
.PP
.RE
.PP
\fBParameters\fP
.RS 4
\fIval\fP the \fBbasic_json\fP value to be converted\&.
.RE
.PP
@complexity Usually linear in the size of the passed \fIval\fP, also depending on the implementation of the called \fC\fBto_json()\fP\fP method\&.
.PP
@exceptionsafety Depends on the called constructor\&. For types directly supported by the library (i\&.e\&., all types for which no \fC\fBto_json()\fP\fP function was provided), strong guarantee holds: if an exception is thrown, there are no changes to any JSON value\&.
.PP
\fBSince\fP
.RS 4
version 3\&.2\&.0 
.RE
.PP

.SS "nlohmann::basic_json::basic_json (\fBinitializer_list_t\fP init, bool type_deduction = \fCtrue\fP, \fBvalue_t\fP manual_type = \fC\fBvalue_t::array\fP\fP)\fC [inline]\fP"

.PP
create a container (array or object) from an initializer list Creates a JSON value of type array or object from the passed initializer list \fIinit\fP\&. In case \fItype_deduction\fP is \fCtrue\fP (default), the type of the JSON value to be created is deducted from the initializer list \fIinit\fP according to the following rules:
.PP
.IP "1." 4
If the list is empty, an empty JSON object value \fC{}\fP is created\&.
.IP "2." 4
If the list consists of pairs whose first element is a string, a JSON object value is created where the first elements of the pairs are treated as keys and the second elements are as values\&.
.IP "3." 4
In all other cases, an array is created\&.
.PP
.PP
The rules aim to create the best fit between a C++ initializer list and JSON values\&. The rationale is as follows:
.PP
.IP "1." 4
The empty initializer list is written as \fC{}\fP which is exactly an empty JSON object\&.
.IP "2." 4
C++ has no way of describing mapped types other than to list a list of pairs\&. As JSON requires that keys must be of type string, rule 2 is the weakest constraint one can pose on initializer lists to interpret them as an object\&.
.IP "3." 4
In all other cases, the initializer list could not be interpreted as JSON object type, so interpreting it as JSON array type is safe\&.
.PP
.PP
With the rules described above, the following JSON values cannot be expressed by an initializer list:
.PP
.IP "\(bu" 2
the empty array (\fC[]\fP): use \fBarray(initializer_list_t)\fP with an empty initializer list in this case
.IP "\(bu" 2
arrays whose elements satisfy rule 2: use \fBarray(initializer_list_t)\fP with the same initializer list in this case
.PP
.PP
\fBNote\fP
.RS 4
When used without parentheses around an empty initializer list, \fBbasic_json()\fP is called instead of this function, yielding the JSON null value\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIinit\fP initializer list with JSON values
.br
\fItype_deduction\fP internal parameter; when set to \fCtrue\fP, the type of the JSON value is deducted from the initializer list \fIinit\fP; when set to \fCfalse\fP, the type provided via \fImanual_type\fP is forced\&. This mode is used by the functions \fBarray(initializer_list_t)\fP and \fBobject(initializer_list_t)\fP\&.
.br
\fImanual_type\fP internal parameter; when \fItype_deduction\fP is set to \fCfalse\fP, the created JSON value will use the provided type (only \fBvalue_t::array\fP and \fBvalue_t::object\fP are valid); when \fItype_deduction\fP is set to \fCtrue\fP, this parameter has no effect
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.301\fP if \fItype_deduction\fP is \fCfalse\fP, \fImanual_type\fP is \fC\fBvalue_t::object\fP\fP, but \fIinit\fP contains an element which is not a pair whose first element is a string\&. In this case, the constructor could not create an object\&. If \fItype_deduction\fP would have be \fCtrue\fP, an array would have been created\&. See \fBobject(initializer_list_t)\fP for an example\&.
.RE
.PP
@complexity Linear in the size of the initializer list \fIinit\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The example below shows how JSON values are created from initializer lists\&.,basic_json__list_init_t}
.PP
\fBSee also\fP
.RS 4
\fBarray(initializer_list_t)\fP -- create a JSON \fBarray\fP \fBvalue\fP from an initializer list 
.PP
\fBobject(initializer_list_t)\fP -- create a JSON \fBobject\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "nlohmann::basic_json::basic_json (\fBsize_type\fP cnt, const \fBbasic_json\fP & val)\fC [inline]\fP"

.PP
construct an array with count copies of given value Constructs a JSON array value by creating \fIcnt\fP copies of a passed value\&. In case \fIcnt\fP is \fC0\fP, an empty array is created\&.
.PP
\fBParameters\fP
.RS 4
\fIcnt\fP the number of JSON copies of \fIval\fP to create 
.br
\fIval\fP the JSON value to copy
.RE
.PP
\fBPostcondition\fP
.RS 4
\fCstd::distance(\fBbegin()\fP,\fBend()\fP) == cnt\fP holds\&.
.RE
.PP
@complexity Linear in \fIcnt\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The following code shows examples for the \fBbasic_json\fP(size_type\\, const \fBbasic_json\fP&) constructor\&.,basic_json__size_type_basic_json}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<class InputIT , typename std::enable_if< std::is_same< InputIT, typename basic_json_t::iterator >::value or std::is_same< InputIT, typename basic_json_t::const_iterator >::value, int >::type  = 0> nlohmann::basic_json::basic_json (InputIT first, InputIT last)\fC [inline]\fP"

.PP
construct a JSON container given an iterator range Constructs the JSON value with the contents of the range \fC[first, last)\fP\&. The semantics depends on the different types a JSON value can have:
.IP "\(bu" 2
In case of a null type, invalid_iterator\&.206 is thrown\&.
.IP "\(bu" 2
In case of other primitive types (number, boolean, or string), \fIfirst\fP must be \fC\fBbegin()\fP\fP and \fIlast\fP must be \fC\fBend()\fP\fP\&. In this case, the value is copied\&. Otherwise, invalid_iterator\&.204 is thrown\&.
.IP "\(bu" 2
In case of structured types (array, object), the constructor behaves as similar versions for \fCstd::vector\fP or \fCstd::map\fP; that is, a JSON array or object is constructed from the values in the range\&.
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIInputIT\fP an input iterator type (\fBiterator\fP or \fBconst_iterator\fP)
.RE
.PP
\fBParameters\fP
.RS 4
\fIfirst\fP begin of the range to copy from (included) 
.br
\fIlast\fP end of the range to copy from (excluded)
.RE
.PP
\fBPrecondition\fP
.RS 4
Iterators \fIfirst\fP and \fIlast\fP must be initialized\&. \fBThis precondition is enforced with an assertion (see warning)\&.\fP If assertions are switched off, a violation of this precondition yields undefined behavior\&.
.PP
Range \fC[first, last)\fP is valid\&. Usually, this precondition cannot be checked efficiently\&. Only certain edge cases are detected; see the description of the exceptions below\&. A violation of this precondition yields undefined behavior\&.
.RE
.PP
\fBWarning\fP
.RS 4
A precondition is enforced with a runtime assertion that will result in calling \fCstd::abort\fP if this precondition is not met\&. Assertions can be disabled by defining \fCNDEBUG\fP at compile time\&. See https://en.cppreference.com/w/cpp/error/assert for more information\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIinvalid_iterator\&.201\fP if iterators \fIfirst\fP and \fIlast\fP are not compatible (i\&.e\&., do not belong to the same JSON value)\&. In this case, the range \fC[first, last)\fP is undefined\&. 
.br
\fIinvalid_iterator\&.204\fP if iterators \fIfirst\fP and \fIlast\fP belong to a primitive type (number, boolean, or string), but \fIfirst\fP does not point to the first element any more\&. In this case, the range \fC[first, last)\fP is undefined\&. See example code below\&. 
.br
\fIinvalid_iterator\&.206\fP if iterators \fIfirst\fP and \fIlast\fP belong to a null value\&. In this case, the range \fC[first, last)\fP is undefined\&.
.RE
.PP
@complexity Linear in distance between \fIfirst\fP and \fIlast\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The example below shows several ways to create JSON values by specifying a subrange with iterators\&.,basic_json__InputIt_InputIt}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "nlohmann::basic_json::basic_json (const \fBbasic_json\fP & other)\fC [inline]\fP"

.PP
copy constructor Creates a copy of a given JSON value\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP the JSON value to copy
.RE
.PP
\fBPostcondition\fP
.RS 4
\fC*this == other\fP
.RE
.PP
@complexity Linear in the size of \fIother\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.IP "\(bu" 2
As postcondition, it holds: \fCother == basic_json(other)\fP\&.
.PP
.PP
@liveexample{The following code shows an example for the copy constructor\&.,basic_json__basic_json}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "nlohmann::basic_json::basic_json (\fBbasic_json\fP && other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
move constructor Move constructor\&. Constructs a JSON value with the contents of the given value \fIother\fP using move semantics\&. It 'steals' the resources from \fIother\fP and leaves it as JSON null value\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP value to move to this object
.RE
.PP
\fBPostcondition\fP
.RS 4
\fC*this\fP has the same value as \fIother\fP before the call\&. 
.PP
\fIother\fP is a JSON null value\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this constructor never throws exceptions\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCMoveConstructible\fP requirements\&.
.PP
@liveexample{The code below shows the move constructor explicitly called via std::move\&.,basic_json__moveconstructor}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "nlohmann::basic_json::~basic_json ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
destructor Destroys the JSON value and frees all allocated memory\&.
.PP
@complexity Linear\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.IP "\(bu" 2
All stored elements are destroyed and all memory is freed\&.
.PP
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static bool nlohmann::basic_json::accept (\fBdetail::input_adapter\fP && i)\fC [inline]\fP, \fC [static]\fP"

.SS "template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static bool nlohmann::basic_json::accept (IteratorType first, IteratorType last)\fC [inline]\fP, \fC [static]\fP"

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::array (\fBinitializer_list_t\fP init = \fC{}\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
explicitly create an array from an initializer list Creates a JSON array value from a given initializer list\&. That is, given a list of values \fCa, b, c\fP, creates the JSON value \fC[a, b, c]\fP\&. If the initializer list is empty, the empty array \fC[]\fP is created\&.
.PP
\fBNote\fP
.RS 4
This function is only needed to express two edge cases that cannot be realized with the initializer list constructor (\fBbasic_json(initializer_list_t, bool, value_t)\fP)\&. These cases are:
.IP "1." 4
creating an array whose elements are all pairs whose first element is a string -- in this case, the initializer list constructor would create an object, taking the first elements as keys
.IP "2." 4
creating an empty array -- passing the empty initializer list to the initializer list constructor yields an empty object
.PP
.RE
.PP
\fBParameters\fP
.RS 4
\fIinit\fP initializer list with JSON values to create an array from (optional)
.RE
.PP
\fBReturns\fP
.RS 4
JSON array value
.RE
.PP
@complexity Linear in the size of \fIinit\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The following code shows an example for the \fCarray\fP function\&.,array}
.PP
\fBSee also\fP
.RS 4
\fBbasic_json(initializer_list_t, bool, value_t)\fP -- create a JSON \fBvalue\fP from an initializer list 
.PP
\fBobject(initializer_list_t)\fP -- create a JSON \fBobject\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::at (const \fBjson_pointer\fP & ptr)\fC [inline]\fP"

.PP
access specified element via JSON Pointer Returns a reference to the element at with specified JSON pointer \fIptr\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.106\fP if an array index in the passed JSON pointer \fIptr\fP begins with '0'\&. See example below\&.
.br
\fIparse_error\&.109\fP if an array index in the passed JSON pointer \fIptr\fP is not a number\&. See example below\&.
.br
\fIout_of_range\&.401\fP if an array index in the passed JSON pointer \fIptr\fP is out of range\&. See example below\&.
.br
\fIout_of_range\&.402\fP if the array index '-' is used in the passed JSON pointer \fIptr\fP\&. As \fCat\fP provides checked access (and no elements are implicitly inserted), the index '-' is always invalid\&. See example below\&.
.br
\fIout_of_range\&.403\fP if the JSON pointer describes a key of an object which cannot be found\&. See example below\&.
.br
\fIout_of_range\&.404\fP if the JSON pointer \fIptr\fP can not be resolved\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0
.RE
.PP
@liveexample{The behavior is shown in the example\&.,at_json_pointer} 
.SS "\fBconst_reference\fP nlohmann::basic_json::at (const \fBjson_pointer\fP & ptr) const\fC [inline]\fP"

.PP
access specified element via JSON Pointer Returns a const reference to the element at with specified JSON pointer \fIptr\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.106\fP if an array index in the passed JSON pointer \fIptr\fP begins with '0'\&. See example below\&.
.br
\fIparse_error\&.109\fP if an array index in the passed JSON pointer \fIptr\fP is not a number\&. See example below\&.
.br
\fIout_of_range\&.401\fP if an array index in the passed JSON pointer \fIptr\fP is out of range\&. See example below\&.
.br
\fIout_of_range\&.402\fP if the array index '-' is used in the passed JSON pointer \fIptr\fP\&. As \fCat\fP provides checked access (and no elements are implicitly inserted), the index '-' is always invalid\&. See example below\&.
.br
\fIout_of_range\&.403\fP if the JSON pointer describes a key of an object which cannot be found\&. See example below\&.
.br
\fIout_of_range\&.404\fP if the JSON pointer \fIptr\fP can not be resolved\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0
.RE
.PP
@liveexample{The behavior is shown in the example\&.,at_json_pointer_const} 
.SS "\fBreference\fP nlohmann::basic_json::at (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
access specified object element with bounds checking Returns a reference to the element at with specified key \fIkey\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.304\fP if the JSON value is not an object; in this case, calling \fCat\fP with a key makes no sense\&. See example below\&. 
.br
\fIout_of_range\&.403\fP if the key \fIkey\fP is is not stored in the object; that is, \fCfind(key) == \fBend()\fP\fP\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Logarithmic in the size of the container\&.
.PP
\fBSee also\fP
.RS 4
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
@liveexample{The example below shows how object elements can be read and written using \fC\fBat()\fP\fP\&. It also demonstrates the different exceptions that can be thrown\&.,at__object_t_key_type} 
.SS "\fBconst_reference\fP nlohmann::basic_json::at (const typename object_t::key_type & key) const\fC [inline]\fP"

.PP
access specified object element with bounds checking Returns a const reference to the element at with specified key \fIkey\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.304\fP if the JSON value is not an object; in this case, calling \fCat\fP with a key makes no sense\&. See example below\&. 
.br
\fIout_of_range\&.403\fP if the key \fIkey\fP is is not stored in the object; that is, \fCfind(key) == \fBend()\fP\fP\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Logarithmic in the size of the container\&.
.PP
\fBSee also\fP
.RS 4
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
@liveexample{The example below shows how object elements can be read using \fC\fBat()\fP\fP\&. It also demonstrates the different exceptions that can be thrown\&., at__object_t_key_type_const} 
.SS "\fBreference\fP nlohmann::basic_json::at (\fBsize_type\fP idx)\fC [inline]\fP"

.PP
access specified array element with bounds checking Returns a reference to the element at specified location \fIidx\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.304\fP if the JSON value is not an array; in this case, calling \fCat\fP with an index makes no sense\&. See example below\&. 
.br
\fIout_of_range\&.401\fP if the index \fIidx\fP is out of range of the array; that is, \fCidx >= \fBsize()\fP\fP\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
@liveexample{The example below shows how array elements can be read and written using \fC\fBat()\fP\fP\&. It also demonstrates the different exceptions that can be thrown\&.,at__size_type} 
.SS "\fBconst_reference\fP nlohmann::basic_json::at (\fBsize_type\fP idx) const\fC [inline]\fP"

.PP
access specified array element with bounds checking Returns a const reference to the element at specified location \fIidx\fP, with bounds checking\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.304\fP if the JSON value is not an array; in this case, calling \fCat\fP with an index makes no sense\&. See example below\&. 
.br
\fIout_of_range\&.401\fP if the index \fIidx\fP is out of range of the array; that is, \fCidx >= \fBsize()\fP\fP\&. See example below\&.
.RE
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0
.RE
.PP
@liveexample{The example below shows how array elements can be read using \fC\fBat()\fP\fP\&. It also demonstrates the different exceptions that can be thrown\&., at__size_type_const} 
.SS "\fBreference\fP nlohmann::basic_json::back ()\fC [inline]\fP"

.PP
access the last element Returns a reference to the last element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.back()\fP is equivalent to 
.PP
.nf
auto tmp = c\&.end();
--tmp;
return *tmp;

.fi
.PP
.PP
\fBReturns\fP
.RS 4
In case of a structured type (array or object), a reference to the last element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
@complexity Constant\&.
.PP
\fBPrecondition\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIinvalid_iterator\&.214\fP when called on a \fCnull\fP value\&. See example below\&.
.RE
.PP
@liveexample{The following code shows an example for \fC\fBback()\fP\fP\&.,back}
.PP
\fBSee also\fP
.RS 4
\fBfront()\fP -- access the first element
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reference\fP nlohmann::basic_json::back () const\fC [inline]\fP"

.PP
access the last element Returns a reference to the last element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.back()\fP is equivalent to 
.PP
.nf
auto tmp = c\&.end();
--tmp;
return *tmp;

.fi
.PP
.PP
\fBReturns\fP
.RS 4
In case of a structured type (array or object), a reference to the last element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
@complexity Constant\&.
.PP
\fBPrecondition\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIinvalid_iterator\&.214\fP when called on a \fCnull\fP value\&. See example below\&.
.RE
.PP
@liveexample{The following code shows an example for \fC\fBback()\fP\fP\&.,back}
.PP
\fBSee also\fP
.RS 4
\fBfront()\fP -- access the first element
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_iterator\fP nlohmann::basic_json::begin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to the first element Returns a const iterator to the first element\&.
.PP
\fBReturns\fP
.RS 4
const iterator to the first element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBbegin()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcbegin()\fP\fP\&.,cbegin}
.PP
\fBSee also\fP
.RS 4
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::begin ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the first element Returns an iterator to the first element\&.
.PP
\fBReturns\fP
.RS 4
iterator to the first element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBbegin()\fP\fP\&.,begin}
.PP
\fBSee also\fP
.RS 4
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_iterator\fP nlohmann::basic_json::cbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to the first element Returns a const iterator to the first element\&.
.PP
\fBReturns\fP
.RS 4
const iterator to the first element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBbegin()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcbegin()\fP\fP\&.,cbegin}
.PP
\fBSee also\fP
.RS 4
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_iterator\fP nlohmann::basic_json::cend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to one past the last element Returns a const iterator to one past the last element\&.
.PP
\fBReturns\fP
.RS 4
const iterator one past the last element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBend()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcend()\fP\fP\&.,cend}
.PP
\fBSee also\fP
.RS 4
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::clear ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
clears the contents Clears the content of a JSON value and resets it to the default value as if \fBbasic_json(value_t)\fP would have been called with the current value type from \fBtype()\fP:
.PP
Value type initial value  null \fCnull\fP  boolean \fCfalse\fP  string \fC''\fP  number \fC0\fP  object \fC{}\fP  array \fC[]\fP  
.PP
\fBPostcondition\fP
.RS 4
Has the same effect as calling 
.PP
.nf
*this = basic_json(type());

.fi
.PP
.RE
.PP
@liveexample{The example below shows the effect of \fC\fBclear()\fP\fP to different JSON types\&.,clear}
.PP
@complexity Linear in the size of the JSON value\&.
.PP
@iterators All iterators, pointers and references related to this container are invalidated\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
\fBSee also\fP
.RS 4
\fBbasic_json(value_t)\fP -- constructor that creates an \fBobject\fP with the same \fBvalue\fP than calling \fC\fBclear()\fP\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool nlohmann::basic_json::contains (const \fBjson_pointer\fP & ptr) const\fC [inline]\fP"

.PP
check the existence of an element in a JSON object given a JSON pointer Check whether the given JSON pointer \fIptr\fP can be resolved in the current JSON value\&.
.PP
\fBNote\fP
.RS 4
This method can be executed on any JSON value type\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIptr\fP JSON pointer to check its existence\&.
.RE
.PP
\fBReturns\fP
.RS 4
true if the JSON pointer can be resolved to a stored value, false otherwise\&.
.RE
.PP
\fBPostcondition\fP
.RS 4
If \fCj\&.contains(ptr)\fP returns true, it is safe to call \fCj[ptr]\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.106\fP if an array index begins with '0' 
.br
\fIparse_error\&.109\fP if an array index was not a number
.RE
.PP
@complexity Logarithmic in the size of the JSON object\&.
.PP
@liveexample{The following code shows an example for \fC\fBcontains()\fP\fP\&.,contains_json_pointer}
.PP
\fBSee also\fP
.RS 4
\fBcontains(KeyT &&) const\fP -- checks the existence of a key
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.7\&.0 
.RE
.PP

.SS "template<typename KeyT , typename std::enable_if< not std::is_same< typename std::decay< KeyT >::type, json_pointer >::value, int >::type  = 0> bool nlohmann::basic_json::contains (KeyT && key) const\fC [inline]\fP"

.PP
check the existence of an element in a JSON object Check whether an element exists in a JSON object with key equivalent to \fIkey\fP\&. If the element is not found or the JSON value is not an object, false is returned\&.
.PP
\fBNote\fP
.RS 4
This method always returns false when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key value to check its existence\&.
.RE
.PP
\fBReturns\fP
.RS 4
true if an element with specified \fIkey\fP exists\&. If no such element with such key is found or the JSON value is not an object, false is returned\&.
.RE
.PP
@complexity Logarithmic in the size of the JSON object\&.
.PP
@liveexample{The following code shows an example for \fC\fBcontains()\fP\fP\&.,contains}
.PP
\fBSee also\fP
.RS 4
\fBfind(KeyT&&)\fP -- returns an \fBiterator\fP to an \fBobject\fP element 
.PP
\fBcontains(const json_pointer&) const\fP -- checks the existence for a JSON \fBpointer\fP
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.6\&.0 
.RE
.PP

.SS "template<typename KeyT > \fBsize_type\fP nlohmann::basic_json::count (KeyT && key) const\fC [inline]\fP"

.PP
returns the number of occurrences of a key in a JSON object Returns the number of elements with key \fIkey\fP\&. If ObjectType is the default \fCstd::map\fP type, the return value will always be \fC0\fP (\fIkey\fP was not found) or \fC1\fP (\fIkey\fP was found)\&.
.PP
\fBNote\fP
.RS 4
This method always returns \fC0\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key value of the element to count
.RE
.PP
\fBReturns\fP
.RS 4
Number of elements with key \fIkey\fP\&. If the JSON value is not an object, the return value will be \fC0\fP\&.
.RE
.PP
@complexity Logarithmic in the size of the JSON object\&.
.PP
@liveexample{The example shows how \fC\fBcount()\fP\fP is used\&.,count}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reverse_iterator\fP nlohmann::basic_json::crbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to the last element Returns a const iterator to the reverse-beginning; that is, the last element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrbegin()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcrbegin()\fP\fP\&.,crbegin}
.PP
\fBSee also\fP
.RS 4
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reverse_iterator\fP nlohmann::basic_json::crend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to one before the first Returns a const reverse iterator to the reverse-end; that is, one before the first element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrend()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcrend()\fP\fP\&.,crend}
.PP
\fBSee also\fP
.RS 4
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::diff (const \fBbasic_json\fP & source, const \fBbasic_json\fP & target, const std::string & path = \fC''\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
creates a diff as a JSON patch Creates a \fCJSON Patch\fP so that value \fIsource\fP can be changed into the value \fItarget\fP by calling \fBpatch\fP function\&.
.PP
\fBInvariant\fP
.RS 4
For two JSON values \fIsource\fP and \fItarget\fP, the following code yields always \fCtrue\fP: 
.PP
.nf
source\&.patch(diff(source, target)) == target;

.fi
.PP
.RE
.PP
\fBNote\fP
.RS 4
Currently, only \fCremove\fP, \fCadd\fP, and \fCreplace\fP operations are generated\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIsource\fP JSON value to compare from 
.br
\fItarget\fP JSON value to compare against 
.br
\fIpath\fP helper value to create JSON pointers
.RE
.PP
\fBReturns\fP
.RS 4
a JSON patch to convert the \fIsource\fP to \fItarget\fP 
.RE
.PP
@complexity Linear in the lengths of \fIsource\fP and \fItarget\fP\&.
.PP
@liveexample{The following code shows how a JSON patch is created as a diff for two JSON values\&.,diff}
.PP
\fBSee also\fP
.RS 4
\fBpatch\fP -- apply a JSON \fBpatch\fP 
.PP
\fBmerge_patch\fP -- apply a JSON Merge Patch
.PP
\fCRFC 6902 (JSON Patch)\fP
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "\fBstring_t\fP nlohmann::basic_json::dump (const int indent = \fC\-1\fP, const char indent_char = \fC' '\fP, const bool ensure_ascii = \fCfalse\fP, const \fBerror_handler_t\fP error_handler = \fCerror_handler_t::strict\fP) const\fC [inline]\fP"

.PP
serialization Serialization function for JSON values\&. The function tries to mimic Python's \fCjson\&.dumps()\fP function, and currently supports its \fIindent\fP and \fIensure_ascii\fP parameters\&.
.PP
\fBParameters\fP
.RS 4
\fIindent\fP If indent is nonnegative, then array elements and object members will be pretty-printed with that indent level\&. An indent level of \fC0\fP will only insert newlines\&. \fC-1\fP (the default) selects the most compact representation\&. 
.br
\fIindent_char\fP The character to use for indentation if \fIindent\fP is greater than \fC0\fP\&. The default is (space)\&. 
.br
\fIensure_ascii\fP If \fIensure_ascii\fP is true, all non-ASCII characters in the output are escaped with \fC\\uXXXX\fP sequences, and the result consists of ASCII characters only\&. 
.br
\fIerror_handler\fP how to react on decoding errors; there are three possible values: \fCstrict\fP (throws and exception in case a decoding error occurs; default), \fCreplace\fP (replace invalid UTF-8 sequences with U+FFFD), and \fCignore\fP (ignore invalid UTF-8 sequences during serialization)\&.
.RE
.PP
\fBReturns\fP
.RS 4
string containing the serialization of the JSON value
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.316\fP if a string stored inside the JSON value is not UTF-8 encoded
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@liveexample{The following example shows the effect of different \fIindent\\\fP, \fIindent_char\\\fP, and \fIensure_ascii\fP parameters to the result of the serialization\&.,dump}
.PP
\fBSee also\fP
.RS 4
https://docs.python.org/2/library/json.html#json.dump
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0; indentation character \fIindent_char\fP, option \fIensure_ascii\fP and exceptions added in version 3\&.0\&.0; error handlers added in version 3\&.4\&.0\&. 
.RE
.PP

.SS "template<class\&.\&.\&. Args> std::pair<\fBiterator\fP, bool> nlohmann::basic_json::emplace (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
add an object to an object if key does not exist Inserts a new element into a JSON object constructed in-place with the given \fIargs\fP if there is no element with the key in the container\&. If the function is called on a JSON null value, an empty object is created before appending the value created from \fIargs\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIargs\fP arguments to forward to a constructor of \fBbasic_json\fP 
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIArgs\fP compatible types to create a \fBbasic_json\fP object
.RE
.PP
\fBReturns\fP
.RS 4
a pair consisting of an iterator to the inserted element, or the already-existing element if no insertion happened, and a bool denoting whether the insertion took place\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.311\fP when called on a type other than JSON object or null; example: \fC'cannot use emplace() with number'\fP
.RE
.PP
@complexity Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
@liveexample{The example shows how \fC\fBemplace()\fP\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&. Further note how no value is added if there was already one value stored with the same key\&.,emplace}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.8 
.RE
.PP

.SS "template<class\&.\&.\&. Args> \fBreference\fP nlohmann::basic_json::emplace_back (Args &&\&.\&.\&. args)\fC [inline]\fP"

.PP
add an object to an array Creates a JSON value from the passed parameters \fIargs\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending the value created from \fIargs\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIargs\fP arguments to forward to a constructor of \fBbasic_json\fP 
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIArgs\fP compatible types to create a \fBbasic_json\fP object
.RE
.PP
\fBReturns\fP
.RS 4
reference to the inserted element
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.311\fP when called on a type other than JSON array or null; example: \fC'cannot use emplace_back() with number'\fP
.RE
.PP
@complexity Amortized constant\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,emplace_back}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.8, returns reference since 3\&.7\&.0 
.RE
.PP

.SS "bool nlohmann::basic_json::empty () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
checks whether the container is empty\&. Checks if a JSON value has no elements (i\&.e\&. whether its \fBsize\fP is \fC0\fP)\&.
.PP
\fBReturns\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fCtrue\fP  boolean \fCfalse\fP  string \fCfalse\fP  number \fCfalse\fP  object result of function \fCobject_t::empty()\fP  array result of function \fCarray_t::empty()\fP  
.RE
.PP
@liveexample{The following code uses \fC\fBempty()\fP\fP to check if a JSON object contains any elements\&.,empty}
.PP
@complexity Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fC\fBempty()\fP\fP functions have constant complexity\&.
.PP
@iterators No changes\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
\fBNote\fP
.RS 4
This function does not return whether a string stored as JSON value is empty - it returns whether the JSON container itself is empty which is false in the case of a string\&.
.RE
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fC\fBbegin()\fP == \fBend()\fP\fP\&.
.PP
.PP
\fBSee also\fP
.RS 4
\fBsize()\fP -- returns the number of elements
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_iterator\fP nlohmann::basic_json::end () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const iterator to one past the last element Returns a const iterator to one past the last element\&.
.PP
\fBReturns\fP
.RS 4
const iterator one past the last element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBend()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcend()\fP\fP\&.,cend}
.PP
\fBSee also\fP
.RS 4
\fBend()\fP -- returns an \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::end ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to one past the last element Returns an iterator to one past the last element\&.
.PP
\fBReturns\fP
.RS 4
iterator one past the last element
.RE
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBend()\fP\fP\&.,end}
.PP
\fBSee also\fP
.RS 4
\fBcend()\fP -- returns a const \fBiterator\fP to the \fBend\fP 
.PP
\fBbegin()\fP -- returns an \fBiterator\fP to the beginning 
.PP
\fBcbegin()\fP -- returns a const \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::erase (const \fBsize_type\fP idx)\fC [inline]\fP"

.PP
remove element from a JSON array given an index Removes element from a JSON array at the index \fIidx\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP index of the element to remove
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.307\fP when called on a type other than JSON object; example: \fC'cannot use erase() with null'\fP 
.br
\fIout_of_range\&.401\fP when \fCidx >= \fBsize()\fP\fP; example: \fC'array index 17
is out of range'\fP
.RE
.PP
@complexity Linear in distance between \fIidx\fP and the end of the container\&.
.PP
@liveexample{The example shows the effect of \fC\fBerase()\fP\fP\&.,erase__size_type}
.PP
\fBSee also\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBsize_type\fP nlohmann::basic_json::erase (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
remove element from a JSON object given a key Removes elements from a JSON object with the key value \fIkey\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIkey\fP value of the elements to remove
.RE
.PP
\fBReturns\fP
.RS 4
Number of elements removed\&. If \fIObjectType\fP is the default \fCstd::map\fP type, the return value will always be \fC0\fP (\fIkey\fP was not found) or \fC1\fP (\fIkey\fP was found)\&.
.RE
.PP
\fBPostcondition\fP
.RS 4
References and iterators to the erased elements are invalidated\&. Other references and iterators are not affected\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.307\fP when called on a type other than JSON object; example: \fC'cannot use erase() with null'\fP
.RE
.PP
@complexity \fClog(size()) + count(key)\fP
.PP
@liveexample{The example shows the effect of \fC\fBerase()\fP\fP\&.,erase__key_type}
.PP
\fBSee also\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType nlohmann::basic_json::erase (IteratorType first, IteratorType last)\fC [inline]\fP"

.PP
remove elements given an iterator range Removes the element specified by the range \fC[first; last)\fP\&. The iterator \fIfirst\fP does not need to be dereferenceable if \fCfirst == last\fP: erasing an empty range is a no-op\&.
.PP
If called on a primitive type other than \fCnull\fP, the resulting JSON value will be \fCnull\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIfirst\fP iterator to the beginning of the range to remove 
.br
\fIlast\fP iterator past the end of the range to remove 
.RE
.PP
\fBReturns\fP
.RS 4
Iterator following the last removed element\&. If the iterator \fIsecond\fP refers to the last element, the \fC\fBend()\fP\fP iterator is returned\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIIteratorType\fP an \fBiterator\fP or \fBconst_iterator\fP
.RE
.PP
\fBPostcondition\fP
.RS 4
Invalidates iterators and references at or after the point of the erase, including the \fC\fBend()\fP\fP iterator\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.307\fP if called on a \fCnull\fP value; example: \fC'cannot use
erase() with null'\fP 
.br
\fIinvalid_iterator\&.203\fP if called on iterators which does not belong to the current JSON value; example: \fC'iterators do not fit current value'\fP 
.br
\fIinvalid_iterator\&.204\fP if called on a primitive type with invalid iterators (i\&.e\&., if \fCfirst != \fBbegin()\fP\fP and \fClast != \fBend()\fP\fP); example: \fC'iterators out of range'\fP
.RE
.PP
@complexity The complexity depends on the type:
.IP "\(bu" 2
objects: \fClog(size()) + std::distance(first, last)\fP
.IP "\(bu" 2
arrays: linear in the distance between \fIfirst\fP and \fIlast\fP, plus linear in the distance between \fIlast\fP and end of the container
.IP "\(bu" 2
strings: linear in the length of the string
.IP "\(bu" 2
other types: constant
.PP
.PP
@liveexample{The example shows the result of \fC\fBerase()\fP\fP for different JSON types\&.,erase__IteratorType_IteratorType}
.PP
\fBSee also\fP
.RS 4
\fBerase(IteratorType)\fP -- removes the element \fBat\fP a given position 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<class IteratorType , typename std::enable_if< std::is_same< IteratorType, typename basic_json_t::iterator >::value or std::is_same< IteratorType, typename basic_json_t::const_iterator >::value, int >::type  = 0> IteratorType nlohmann::basic_json::erase (IteratorType pos)\fC [inline]\fP"

.PP
remove element given an iterator Removes the element specified by iterator \fIpos\fP\&. The iterator \fIpos\fP must be valid and dereferenceable\&. Thus the \fC\fBend()\fP\fP iterator (which is valid, but is not dereferenceable) cannot be used as a value for \fIpos\fP\&.
.PP
If called on a primitive type other than \fCnull\fP, the resulting JSON value will be \fCnull\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator to the element to remove 
.RE
.PP
\fBReturns\fP
.RS 4
Iterator following the last removed element\&. If the iterator \fIpos\fP refers to the last element, the \fC\fBend()\fP\fP iterator is returned\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIIteratorType\fP an \fBiterator\fP or \fBconst_iterator\fP
.RE
.PP
\fBPostcondition\fP
.RS 4
Invalidates iterators and references at or after the point of the erase, including the \fC\fBend()\fP\fP iterator\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.307\fP if called on a \fCnull\fP value; example: \fC'cannot use
erase() with null'\fP 
.br
\fIinvalid_iterator\&.202\fP if called on an iterator which does not belong to the current JSON value; example: \fC'iterator does not fit current
value'\fP 
.br
\fIinvalid_iterator\&.205\fP if called on a primitive type with invalid iterator (i\&.e\&., any iterator which is not \fC\fBbegin()\fP\fP); example: \fC'iterator
out of range'\fP
.RE
.PP
@complexity The complexity depends on the type:
.IP "\(bu" 2
objects: amortized constant
.IP "\(bu" 2
arrays: linear in distance between \fIpos\fP and the end of the container
.IP "\(bu" 2
strings: linear in the length of the string
.IP "\(bu" 2
other types: constant
.PP
.PP
@liveexample{The example shows the result of \fC\fBerase()\fP\fP for different JSON types\&.,erase__IteratorType}
.PP
\fBSee also\fP
.RS 4
\fBerase(IteratorType, IteratorType)\fP -- removes the elements in the given range 
.PP
\fBerase(const typename object_t::key_type&)\fP -- removes the element from an \fBobject\fP \fBat\fP the given key 
.PP
\fBerase(const size_type)\fP -- removes the element from an \fBarray\fP \fBat\fP the given index
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename KeyT > \fBiterator\fP nlohmann::basic_json::find (KeyT && key)\fC [inline]\fP"

.PP
find an element in a JSON object Finds an element in a JSON object with key equivalent to \fIkey\fP\&. If the element is not found or the JSON value is not an object, \fBend()\fP is returned\&.
.PP
\fBNote\fP
.RS 4
This method always returns \fBend()\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key value of the element to search for\&.
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to an element with key equivalent to \fIkey\fP\&. If no such element is found or the JSON value is not an object, past-the-end (see \fBend()\fP) iterator is returned\&.
.RE
.PP
@complexity Logarithmic in the size of the JSON object\&.
.PP
@liveexample{The example shows how \fC\fBfind()\fP\fP is used\&.,find__key_type}
.PP
\fBSee also\fP
.RS 4
\fBcontains(KeyT&&) const\fP -- checks whether a key exists
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename KeyT > \fBconst_iterator\fP nlohmann::basic_json::find (KeyT && key) const\fC [inline]\fP"

.PP
find an element in a JSON object find an element in a JSON object Finds an element in a JSON object with key equivalent to \fIkey\fP\&. If the element is not found or the JSON value is not an object, \fBend()\fP is returned\&.
.PP
\fBNote\fP
.RS 4
This method always returns \fBend()\fP when executed on a JSON type that is not an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key value of the element to search for\&.
.RE
.PP
\fBReturns\fP
.RS 4
Iterator to an element with key equivalent to \fIkey\fP\&. If no such element is found or the JSON value is not an object, past-the-end (see \fBend()\fP) iterator is returned\&.
.RE
.PP
@complexity Logarithmic in the size of the JSON object\&.
.PP
@liveexample{The example shows how \fC\fBfind()\fP\fP is used\&.,find__key_type}
.PP
\fBSee also\fP
.RS 4
\fBcontains(KeyT&&) const\fP -- checks whether a key exists
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBbasic_json\fP nlohmann::basic_json::flatten () const\fC [inline]\fP"

.PP
return flattened JSON value The function creates a JSON object whose keys are JSON pointers (see \fCRFC 6901\fP) and whose values are all primitive\&. The original JSON value can be restored using the \fBunflatten()\fP function\&.
.PP
\fBReturns\fP
.RS 4
an object that maps JSON pointers to primitive values
.RE
.PP
\fBNote\fP
.RS 4
Empty objects and arrays are flattened to \fCnull\fP and will not be reconstructed correctly by the \fBunflatten()\fP function\&.
.RE
.PP
@complexity Linear in the size the JSON value\&.
.PP
@liveexample{The following code shows how a JSON object is flattened to an object whose keys consist of JSON pointers\&.,flatten}
.PP
\fBSee also\fP
.RS 4
\fBunflatten()\fP for the reverse function
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_bson (A1 && a1, A2 && a2, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
Create a JSON value from an input in BSON format\&. Deserializes a given input \fIi\fP to a JSON value using the BSON (Binary JSON) serialization format\&.
.PP
The library maps BSON record types to JSON value types as follows:
.PP
BSON type BSON marker byte JSON value type  double 0x01 number_float  string 0x02 string  document 0x03 object  array 0x04 array  binary 0x05 still unsupported  undefined 0x06 still unsupported  ObjectId 0x07 still unsupported  boolean 0x08 boolean  UTC Date-Time 0x09 still unsupported  null 0x0A null  Regular Expr\&. 0x0B still unsupported  DB Pointer 0x0C still unsupported  JavaScript Code 0x0D still unsupported  Symbol 0x0E still unsupported  JavaScript Code 0x0F still unsupported  int32 0x10 number_integer  Timestamp 0x11 still unsupported  128-bit decimal float 0x13 still unsupported  Max Key 0x7F still unsupported  Min Key 0xFF still unsupported  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP\&. The unsupported mappings are indicated in the table above\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in BSON format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.114\fP if an unsupported BSON record type is encountered
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in BSON format to a JSON value\&.,from_bson}
.PP
\fBSee also\fP
.RS 4
http://bsonspec.org/spec.html 
.PP
\fBto_bson(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_bson (\fBdetail::input_adapter\fP && i, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
Create a JSON value from an input in BSON format\&. Deserializes a given input \fIi\fP to a JSON value using the BSON (Binary JSON) serialization format\&.
.PP
The library maps BSON record types to JSON value types as follows:
.PP
BSON type BSON marker byte JSON value type  double 0x01 number_float  string 0x02 string  document 0x03 object  array 0x04 array  binary 0x05 still unsupported  undefined 0x06 still unsupported  ObjectId 0x07 still unsupported  boolean 0x08 boolean  UTC Date-Time 0x09 still unsupported  null 0x0A null  Regular Expr\&. 0x0B still unsupported  DB Pointer 0x0C still unsupported  JavaScript Code 0x0D still unsupported  Symbol 0x0E still unsupported  JavaScript Code 0x0F still unsupported  int32 0x10 number_integer  Timestamp 0x11 still unsupported  128-bit decimal float 0x13 still unsupported  Max Key 0x7F still unsupported  Min Key 0xFF still unsupported  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP\&. The unsupported mappings are indicated in the table above\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in BSON format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.114\fP if an unsupported BSON record type is encountered
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in BSON format to a JSON value\&.,from_bson}
.PP
\fBSee also\fP
.RS 4
http://bsonspec.org/spec.html 
.PP
\fBto_bson(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format 
.RE
.PP

.SS "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_cbor (A1 && a1, A2 && a2, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in CBOR format Deserializes a given input \fIi\fP to a JSON value using the CBOR (Concise Binary Object Representation) serialization format\&.
.PP
The library maps CBOR types to JSON value types as follows:
.PP
CBOR type JSON value type first byte  Integer number_unsigned 0x00\&.\&.0x17  Unsigned integer number_unsigned 0x18  Unsigned integer number_unsigned 0x19  Unsigned integer number_unsigned 0x1A  Unsigned integer number_unsigned 0x1B  Negative integer number_integer 0x20\&.\&.0x37  Negative integer number_integer 0x38  Negative integer number_integer 0x39  Negative integer number_integer 0x3A  Negative integer number_integer 0x3B  Negative integer number_integer 0x40\&.\&.0x57  UTF-8 string string 0x60\&.\&.0x77  UTF-8 string string 0x78  UTF-8 string string 0x79  UTF-8 string string 0x7A  UTF-8 string string 0x7B  UTF-8 string string 0x7F  array array 0x80\&.\&.0x97  array array 0x98  array array 0x99  array array 0x9A  array array 0x9B  array array 0x9F  map object 0xA0\&.\&.0xB7  map object 0xB8  map object 0xB9  map object 0xBA  map object 0xBB  map object 0xBF  False \fCfalse\fP 0xF4  True \fCtrue\fP 0xF5  Null \fCnull\fP 0xF6  Half-Precision Float number_float 0xF9  Single-Precision Float number_float 0xFA  Double-Precision Float number_float 0xFB  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP in the sense that not all CBOR types can be converted to a JSON value\&. The following CBOR types are not supported and will yield parse errors (parse_error\&.112):
.IP "\(bu" 2
byte strings (0x40\&.\&.0x5F)
.IP "\(bu" 2
date/time (0xC0\&.\&.0xC1)
.IP "\(bu" 2
bignum (0xC2\&.\&.0xC3)
.IP "\(bu" 2
decimal fraction (0xC4)
.IP "\(bu" 2
bigfloat (0xC5)
.IP "\(bu" 2
tagged items (0xC6\&.\&.0xD4, 0xD8\&.\&.0xDB)
.IP "\(bu" 2
expected conversions (0xD5\&.\&.0xD7)
.IP "\(bu" 2
simple values (0xE0\&.\&.0xF3, 0xF8)
.IP "\(bu" 2
undefined (0xF7)
.PP
.PP
CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values\&. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error\&.113)\&.
.RE
.PP
\fBNote\fP
.RS 4
Any CBOR output created \fBto_cbor\fP can be successfully parsed by \fBfrom_cbor\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in CBOR format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if unsupported features from CBOR were used in the given input \fIv\fP or if the input is not valid CBOR 
.br
\fIparse_error\&.113\fP if a string was expected as map key, but not found
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in CBOR format to a JSON value\&.,from_cbor}
.PP
\fBSee also\fP
.RS 4
http://cbor.io 
.PP
\fBto_cbor(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9; parameter \fIstart_index\fP since 2\&.1\&.1; changed to consume input adapters, removed start_index parameter, and added \fIstrict\fP parameter since 3\&.0\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_cbor (\fBdetail::input_adapter\fP && i, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in CBOR format Deserializes a given input \fIi\fP to a JSON value using the CBOR (Concise Binary Object Representation) serialization format\&.
.PP
The library maps CBOR types to JSON value types as follows:
.PP
CBOR type JSON value type first byte  Integer number_unsigned 0x00\&.\&.0x17  Unsigned integer number_unsigned 0x18  Unsigned integer number_unsigned 0x19  Unsigned integer number_unsigned 0x1A  Unsigned integer number_unsigned 0x1B  Negative integer number_integer 0x20\&.\&.0x37  Negative integer number_integer 0x38  Negative integer number_integer 0x39  Negative integer number_integer 0x3A  Negative integer number_integer 0x3B  Negative integer number_integer 0x40\&.\&.0x57  UTF-8 string string 0x60\&.\&.0x77  UTF-8 string string 0x78  UTF-8 string string 0x79  UTF-8 string string 0x7A  UTF-8 string string 0x7B  UTF-8 string string 0x7F  array array 0x80\&.\&.0x97  array array 0x98  array array 0x99  array array 0x9A  array array 0x9B  array array 0x9F  map object 0xA0\&.\&.0xB7  map object 0xB8  map object 0xB9  map object 0xBA  map object 0xBB  map object 0xBF  False \fCfalse\fP 0xF4  True \fCtrue\fP 0xF5  Null \fCnull\fP 0xF6  Half-Precision Float number_float 0xF9  Single-Precision Float number_float 0xFA  Double-Precision Float number_float 0xFB  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP in the sense that not all CBOR types can be converted to a JSON value\&. The following CBOR types are not supported and will yield parse errors (parse_error\&.112):
.IP "\(bu" 2
byte strings (0x40\&.\&.0x5F)
.IP "\(bu" 2
date/time (0xC0\&.\&.0xC1)
.IP "\(bu" 2
bignum (0xC2\&.\&.0xC3)
.IP "\(bu" 2
decimal fraction (0xC4)
.IP "\(bu" 2
bigfloat (0xC5)
.IP "\(bu" 2
tagged items (0xC6\&.\&.0xD4, 0xD8\&.\&.0xDB)
.IP "\(bu" 2
expected conversions (0xD5\&.\&.0xD7)
.IP "\(bu" 2
simple values (0xE0\&.\&.0xF3, 0xF8)
.IP "\(bu" 2
undefined (0xF7)
.PP
.PP
CBOR allows map keys of any type, whereas JSON only allows strings as keys in object values\&. Therefore, CBOR maps with keys other than UTF-8 strings are rejected (parse_error\&.113)\&.
.RE
.PP
\fBNote\fP
.RS 4
Any CBOR output created \fBto_cbor\fP can be successfully parsed by \fBfrom_cbor\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in CBOR format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if unsupported features from CBOR were used in the given input \fIv\fP or if the input is not valid CBOR 
.br
\fIparse_error\&.113\fP if a string was expected as map key, but not found
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in CBOR format to a JSON value\&.,from_cbor}
.PP
\fBSee also\fP
.RS 4
http://cbor.io 
.PP
\fBto_cbor(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9; parameter \fIstart_index\fP since 2\&.1\&.1; changed to consume input adapters, removed start_index parameter, and added \fIstrict\fP parameter since 3\&.0\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_msgpack (A1 && a1, A2 && a2, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in MessagePack format Deserializes a given input \fIi\fP to a JSON value using the MessagePack serialization format\&.
.PP
The library maps MessagePack types to JSON value types as follows:
.PP
MessagePack type JSON value type first byte  positive fixint number_unsigned 0x00\&.\&.0x7F  fixmap object 0x80\&.\&.0x8F  fixarray array 0x90\&.\&.0x9F  fixstr string 0xA0\&.\&.0xBF  nil \fCnull\fP 0xC0  false \fCfalse\fP 0xC2  true \fCtrue\fP 0xC3  float 32 number_float 0xCA  float 64 number_float 0xCB  uint 8 number_unsigned 0xCC  uint 16 number_unsigned 0xCD  uint 32 number_unsigned 0xCE  uint 64 number_unsigned 0xCF  int 8 number_integer 0xD0  int 16 number_integer 0xD1  int 32 number_integer 0xD2  int 64 number_integer 0xD3  str 8 string 0xD9  str 16 string 0xDA  str 32 string 0xDB  array 16 array 0xDC  array 32 array 0xDD  map 16 object 0xDE  map 32 object 0xDF  negative fixint number_integer 0xE0-0xFF  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP in the sense that not all MessagePack types can be converted to a JSON value\&. The following MessagePack types are not supported and will yield parse errors:
.IP "\(bu" 2
bin 8 - bin 32 (0xC4\&.\&.0xC6)
.IP "\(bu" 2
ext 8 - ext 32 (0xC7\&.\&.0xC9)
.IP "\(bu" 2
fixext 1 - fixext 16 (0xD4\&.\&.0xD8)
.PP
.RE
.PP
\fBNote\fP
.RS 4
Any MessagePack output created \fBto_msgpack\fP can be successfully parsed by \fBfrom_msgpack\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in MessagePack format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if unsupported features from MessagePack were used in the given input \fIi\fP or if the input is not valid MessagePack 
.br
\fIparse_error\&.113\fP if a string was expected as map key, but not found
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in MessagePack format to a JSON value\&.,from_msgpack}
.PP
\fBSee also\fP
.RS 4
http://msgpack.org 
.PP
\fBto_msgpack(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format 
.PP
\fBfrom_bson(detail::input_adapter&&, const bool, const bool)\fP for the related BSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9; parameter \fIstart_index\fP since 2\&.1\&.1; changed to consume input adapters, removed start_index parameter, and added \fIstrict\fP parameter since 3\&.0\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_msgpack (\fBdetail::input_adapter\fP && i, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in MessagePack format Deserializes a given input \fIi\fP to a JSON value using the MessagePack serialization format\&.
.PP
The library maps MessagePack types to JSON value types as follows:
.PP
MessagePack type JSON value type first byte  positive fixint number_unsigned 0x00\&.\&.0x7F  fixmap object 0x80\&.\&.0x8F  fixarray array 0x90\&.\&.0x9F  fixstr string 0xA0\&.\&.0xBF  nil \fCnull\fP 0xC0  false \fCfalse\fP 0xC2  true \fCtrue\fP 0xC3  float 32 number_float 0xCA  float 64 number_float 0xCB  uint 8 number_unsigned 0xCC  uint 16 number_unsigned 0xCD  uint 32 number_unsigned 0xCE  uint 64 number_unsigned 0xCF  int 8 number_integer 0xD0  int 16 number_integer 0xD1  int 32 number_integer 0xD2  int 64 number_integer 0xD3  str 8 string 0xD9  str 16 string 0xDA  str 32 string 0xDB  array 16 array 0xDC  array 32 array 0xDD  map 16 object 0xDE  map 32 object 0xDF  negative fixint number_integer 0xE0-0xFF  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP in the sense that not all MessagePack types can be converted to a JSON value\&. The following MessagePack types are not supported and will yield parse errors:
.IP "\(bu" 2
bin 8 - bin 32 (0xC4\&.\&.0xC6)
.IP "\(bu" 2
ext 8 - ext 32 (0xC7\&.\&.0xC9)
.IP "\(bu" 2
fixext 1 - fixext 16 (0xD4\&.\&.0xD8)
.PP
.RE
.PP
\fBNote\fP
.RS 4
Any MessagePack output created \fBto_msgpack\fP can be successfully parsed by \fBfrom_msgpack\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in MessagePack format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if unsupported features from MessagePack were used in the given input \fIi\fP or if the input is not valid MessagePack 
.br
\fIparse_error\&.113\fP if a string was expected as map key, but not found
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in MessagePack format to a JSON value\&.,from_msgpack}
.PP
\fBSee also\fP
.RS 4
http://msgpack.org 
.PP
\fBto_msgpack(const basic_json&)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the related UBJSON format 
.PP
\fBfrom_bson(detail::input_adapter&&, const bool, const bool)\fP for the related BSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9; parameter \fIstart_index\fP since 2\&.1\&.1; changed to consume input adapters, removed start_index parameter, and added \fIstrict\fP parameter since 3\&.0\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "template<typename A1 , typename A2 , detail::enable_if_t< std::is_constructible< detail::input_adapter, A1, A2 >::value, int >  = 0> static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_ubjson (A1 && a1, A2 && a2, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in UBJSON format Deserializes a given input \fIi\fP to a JSON value using the UBJSON (Universal Binary JSON) serialization format\&.
.PP
The library maps UBJSON types to JSON value types as follows:
.PP
UBJSON type JSON value type marker  no-op \fIno value, next value is read\fP \fCN\fP  null \fCnull\fP \fCZ\fP  false \fCfalse\fP \fCF\fP  true \fCtrue\fP \fCT\fP  float32 number_float \fCd\fP  float64 number_float \fCD\fP  uint8 number_unsigned \fCU\fP  int8 number_integer \fCi\fP  int16 number_integer \fCI\fP  int32 number_integer \fCl\fP  int64 number_integer \fCL\fP  string string \fCS\fP  char string \fCC\fP  array array (optimized values are supported) \fC[\fP  object object (optimized values are supported) \fC{\fP  
.PP
\fBNote\fP
.RS 4
The mapping is \fBcomplete\fP in the sense that any UBJSON value can be converted to a JSON value\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in UBJSON format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if a parse error occurs 
.br
\fIparse_error\&.113\fP if a string could not be parsed successfully
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in UBJSON format to a JSON value\&.,from_ubjson}
.PP
\fBSee also\fP
.RS 4
http://ubjson.org 
.PP
\fBto_ubjson(const basic_json&, const bool, const bool)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_bson(detail::input_adapter&&, const bool, const bool)\fP for the related BSON format
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.1\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::from_ubjson (\fBdetail::input_adapter\fP && i, const bool strict = \fCtrue\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a JSON value from an input in UBJSON format Deserializes a given input \fIi\fP to a JSON value using the UBJSON (Universal Binary JSON) serialization format\&.
.PP
The library maps UBJSON types to JSON value types as follows:
.PP
UBJSON type JSON value type marker  no-op \fIno value, next value is read\fP \fCN\fP  null \fCnull\fP \fCZ\fP  false \fCfalse\fP \fCF\fP  true \fCtrue\fP \fCT\fP  float32 number_float \fCd\fP  float64 number_float \fCD\fP  uint8 number_unsigned \fCU\fP  int8 number_integer \fCi\fP  int16 number_integer \fCI\fP  int32 number_integer \fCl\fP  int64 number_integer \fCL\fP  string string \fCS\fP  char string \fCC\fP  array array (optimized values are supported) \fC[\fP  object object (optimized values are supported) \fC{\fP  
.PP
\fBNote\fP
.RS 4
The mapping is \fBcomplete\fP in the sense that any UBJSON value can be converted to a JSON value\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP an input in UBJSON format convertible to an input adapter 
.br
\fIstrict\fP whether to expect the input to be consumed until EOF (true by default) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.110\fP if the given input ends prematurely or the end of file was not reached when \fIstrict\fP was set to true 
.br
\fIparse_error\&.112\fP if a parse error occurs 
.br
\fIparse_error\&.113\fP if a string could not be parsed successfully
.RE
.PP
@complexity Linear in the size of the input \fIi\fP\&.
.PP
@liveexample{The example shows the deserialization of a byte vector in UBJSON format to a JSON value\&.,from_ubjson}
.PP
\fBSee also\fP
.RS 4
http://ubjson.org 
.PP
\fBto_ubjson(const basic_json&, const bool, const bool)\fP for the analogous serialization 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the related CBOR format 
.PP
\fBfrom_msgpack(detail::input_adapter&&, const bool, const bool)\fP for the related MessagePack format 
.PP
\fBfrom_bson(detail::input_adapter&&, const bool, const bool)\fP for the related BSON format
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.1\&.0; added \fIallow_exceptions\fP parameter since 3\&.2\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::front ()\fC [inline]\fP"

.PP
access the first element Returns a reference to the first element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.front()\fP is equivalent to \fC*c\&.\fBbegin()\fP\fP\&.
.PP
\fBReturns\fP
.RS 4
In case of a structured type (array or object), a reference to the first element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
@complexity Constant\&.
.PP
\fBPrecondition\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIinvalid_iterator\&.214\fP when called on \fCnull\fP value
.RE
.PP
@liveexample{The following code shows an example for \fC\fBfront()\fP\fP\&.,front}
.PP
\fBSee also\fP
.RS 4
\fBback()\fP -- access the last element
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reference\fP nlohmann::basic_json::front () const\fC [inline]\fP"

.PP
access the first element Returns a reference to the first element in the container\&. For a JSON container \fCc\fP, the expression \fCc\&.front()\fP is equivalent to \fC*c\&.\fBbegin()\fP\fP\&.
.PP
\fBReturns\fP
.RS 4
In case of a structured type (array or object), a reference to the first element is returned\&. In case of number, string, or boolean values, a reference to the value is returned\&.
.RE
.PP
@complexity Constant\&.
.PP
\fBPrecondition\fP
.RS 4
The JSON value must not be \fCnull\fP (would throw \fCstd::out_of_range\fP) or an empty array or object (undefined behavior, \fBguarded by assertions\fP)\&. 
.RE
.PP
\fBPostcondition\fP
.RS 4
The JSON value remains unchanged\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIinvalid_iterator\&.214\fP when called on \fCnull\fP value
.RE
.PP
@liveexample{The following code shows an example for \fC\fBfront()\fP\fP\&.,front}
.PP
\fBSee also\fP
.RS 4
\fBback()\fP -- access the last element
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename BasicJsonType , detail::enable_if_t< std::is_same< typename std::remove_const< BasicJsonType >::type, basic_json_t >::value, int >  = 0> \fBbasic_json\fP nlohmann::basic_json::get () const\fC [inline]\fP"

.PP
get special-case overload This overloads avoids a lot of template boilerplate, it can be seen as the identity method
.PP
\fBTemplate Parameters\fP
.RS 4
\fIBasicJsonType\fP == \fBbasic_json\fP
.RE
.PP
\fBReturns\fP
.RS 4
a copy of *this
.RE
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<typename BasicJsonType , detail::enable_if_t< not std::is_same< BasicJsonType, basic_json >::value and detail::is_basic_json< BasicJsonType >::value, int >  = 0> BasicJsonType nlohmann::basic_json::get () const\fC [inline]\fP"

.PP
get special-case overload This overloads converts the current \fBbasic_json\fP in a different \fBbasic_json\fP type
.PP
\fBTemplate Parameters\fP
.RS 4
\fIBasicJsonType\fP == \fBbasic_json\fP
.RE
.PP
\fBReturns\fP
.RS 4
a copy of *this, converted into 
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIBasicJsonType\fP @complexity Depending on the implementation of the called \fC\fBfrom_json()\fP\fP method\&.
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.2\&.0 
.RE
.PP

.SS "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> constexpr auto nlohmann::basic_json::get () const \-> decltype(std::declval<const basic_json_t&>()\&.template \fBget_ptr\fP<PointerType>())
    \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (explicit) get a pointer value (explicit) Explicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
The pointer becomes invalid if the underlying JSON object changes\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get__PointerType}
.PP
\fBSee also\fP
.RS 4
\fBget_ptr()\fP for explicit pointer-member access
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not std::is_same< basic_json_t, ValueType >::value and detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType nlohmann::basic_json::get () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a value (explicit); special case Explicit type conversion between the JSON value and a compatible value which is \fBnot\fP \fCCopyConstructible\fP and \fBnot\fP \fCDefaultConstructible\fP\&. The value is converted by calling the \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method\&.
.PP
The function is equivalent to executing 
.PP
.nf
return JSONSerializer<ValueTypeCV>::from_json(*this);

.fi
.PP
.PP
This overloads is chosen if:
.IP "\(bu" 2
\fIValueType\fP is not \fBbasic_json\fP and
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP has a \fC\fBfrom_json()\fP\fP method of the form \fCValueType from_json(const basic_json&)\fP
.PP
.PP
\fBNote\fP
.RS 4
If \fBjson_serializer<ValueType>\fP has both overloads of \fC\fBfrom_json()\fP\fP, this one is chosen\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueTypeCV\fP the provided value type 
.br
\fIValueType\fP the returned value type
.RE
.PP
\fBReturns\fP
.RS 4
copy of the JSON value, converted to \fIValueType\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIwhat\fP \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method throws
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<typename ValueTypeCV , typename ValueType  = detail::uncvref_t<ValueTypeCV>, detail::enable_if_t< not detail::is_basic_json< ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value and not detail::has_non_default_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType nlohmann::basic_json::get () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a value (explicit) Explicit type conversion between the JSON value and a compatible value which is \fCCopyConstructible\fP and \fCDefaultConstructible\fP\&. The value is converted by calling the \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method\&.
.PP
The function is equivalent to executing 
.PP
.nf
ValueType ret;
JSONSerializer<ValueType>::from_json(*this, ret);
return ret;

.fi
.PP
.PP
This overloads is chosen if:
.IP "\(bu" 2
\fIValueType\fP is not \fBbasic_json\fP,
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP has a \fC\fBfrom_json()\fP\fP method of the form \fCvoid from_json(const basic_json&, ValueType&)\fP, and
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP does not have a \fC\fBfrom_json()\fP\fP method of the form \fCValueType from_json(const basic_json&)\fP
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueTypeCV\fP the provided value type 
.br
\fIValueType\fP the returned value type
.RE
.PP
\fBReturns\fP
.RS 4
copy of the JSON value, converted to \fIValueType\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fIwhat\fP \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method throws
.RE
.PP
@liveexample{The example below shows several conversions from JSON values to other types\&. There a few things to note: (1) Floating-point numbers can be converted to integers\\, (2) A JSON array can be converted to a standard \fCstd::vector<short>\fP\\, (3) A JSON object can be converted to C++ associative containers such as \fCstd::unordered_map<std::string\\, json>\fP\&.,get__ValueType_const}
.PP
\fBSince\fP
.RS 4
version 2\&.1\&.0 
.RE
.PP

.SS "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> auto nlohmann::basic_json::get () \-> decltype(std::declval<basic_json_t&>()\&.template \fBget_ptr\fP<PointerType>())
    \fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (explicit) Explicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
The pointer becomes invalid if the underlying JSON object changes\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get__PointerType}
.PP
\fBSee also\fP
.RS 4
\fBget_ptr()\fP for explicit pointer-member access
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "static \fBallocator_type\fP nlohmann::basic_json::get_allocator ()\fC [inline]\fP, \fC [static]\fP"

.PP
returns the allocator associated with the container 
.SS "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value and std::is_const< typename std::remove_pointer< PointerType >::type >::value, int >::type  = 0> constexpr auto nlohmann::basic_json::get_ptr () const \-> decltype(std::declval<const basic_json_t&>()\&.get_impl_ptr(std::declval<PointerType>()))
    \fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (implicit) get a pointer value (implicit) Implicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
Writing data to the pointee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&. Enforced by a static assertion\&.
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get_ptr}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename PointerType , typename std::enable_if< std::is_pointer< PointerType >::value, int >::type  = 0> auto nlohmann::basic_json::get_ptr () \-> decltype(std::declval<basic_json_t&>()\&.get_impl_ptr(std::declval<PointerType>()))
    \fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a pointer value (implicit) Implicit pointer access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
Writing data to the pointee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIPointerType\fP pointer type; must be a pointer to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, \fBnumber_unsigned_t\fP, or \fBnumber_float_t\fP\&. Enforced by a static assertion\&.
.RE
.PP
\fBReturns\fP
.RS 4
pointer to the internally stored JSON value if the requested pointer type \fIPointerType\fP fits to the JSON value; \fCnullptr\fP otherwise
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how pointers to internal values of a JSON value can be requested\&. Note that no type conversions are made and a \fCnullptr\fP is returned if the value and the requested pointer type does not match\&.,get_ptr}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value, int >::type  = 0> ReferenceType nlohmann::basic_json::get_ref ()\fC [inline]\fP"

.PP
get a reference value (implicit) Implicit reference access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
Writing data to the referee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIReferenceType\fP reference type; must be a reference to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, or \fBnumber_float_t\fP\&. Enforced by static assertion\&.
.RE
.PP
\fBReturns\fP
.RS 4
reference to the internally stored JSON value if the requested reference type \fIReferenceType\fP fits to the JSON value; throws type_error\&.303 otherwise
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.303\fP in case passed type \fIReferenceType\fP is incompatible with the stored JSON value; see example below
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example shows several calls to \fC\fBget_ref()\fP\fP\&.,get_ref}
.PP
\fBSince\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<typename ReferenceType , typename std::enable_if< std::is_reference< ReferenceType >::value and std::is_const< typename std::remove_reference< ReferenceType >::type >::value, int >::type  = 0> ReferenceType nlohmann::basic_json::get_ref () const\fC [inline]\fP"

.PP
get a reference value (implicit) get a reference value (implicit) Implicit reference access to the internally stored JSON value\&. No copies are made\&.
.PP
\fBWarning\fP
.RS 4
Writing data to the referee of the result yields an undefined state\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIReferenceType\fP reference type; must be a reference to \fBarray_t\fP, \fBobject_t\fP, \fBstring_t\fP, \fBboolean_t\fP, \fBnumber_integer_t\fP, or \fBnumber_float_t\fP\&. Enforced by static assertion\&.
.RE
.PP
\fBReturns\fP
.RS 4
reference to the internally stored JSON value if the requested reference type \fIReferenceType\fP fits to the JSON value; throws type_error\&.303 otherwise
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.303\fP in case passed type \fIReferenceType\fP is incompatible with the stored JSON value; see example below
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example shows several calls to \fC\fBget_ref()\fP\fP\&.,get_ref}
.PP
\fBSince\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<typename T , std::size_t N, typename Array  = T (&)[N], detail::enable_if_t< detail::has_from_json< basic_json_t, Array >::value, int >  = 0> Array nlohmann::basic_json::get_to (T(&) v[N]) const\fC [inline]\fP, \fC [noexcept]\fP"

.SS "template<typename ValueType , detail::enable_if_t< not detail::is_basic_json< ValueType >::value and detail::has_from_json< basic_json_t, ValueType >::value, int >  = 0> ValueType& nlohmann::basic_json::get_to (ValueType & v) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
get a value (explicit) Explicit type conversion between the JSON value and a compatible value\&. The value is filled into the input parameter by calling the \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method\&.
.PP
The function is equivalent to executing 
.PP
.nf
ValueType v;
JSONSerializer<ValueType>::from_json(*this, v);

.fi
.PP
.PP
This overloads is chosen if:
.IP "\(bu" 2
\fIValueType\fP is not \fBbasic_json\fP,
.IP "\(bu" 2
\fBjson_serializer<ValueType>\fP has a \fC\fBfrom_json()\fP\fP method of the form \fCvoid from_json(const basic_json&, ValueType&)\fP, and
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueType\fP the input parameter type\&.
.RE
.PP
\fBReturns\fP
.RS 4
the input parameter, allowing chaining calls\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIwhat\fP \fBjson_serializer<ValueType>\fP \fC\fBfrom_json()\fP\fP method throws
.RE
.PP
@liveexample{The example below shows several conversions from JSON values to other types\&. There a few things to note: (1) Floating-point numbers can be converted to integers\\, (2) A JSON array can be converted to a standard \fCstd::vector<short>\fP\\, (3) A JSON object can be converted to C++ associative containers such as \fCstd::unordered_map<std::string\\, json>\fP\&.,get_to}
.PP
\fBSince\fP
.RS 4
version 3\&.3\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::insert (\fBconst_iterator\fP first, \fBconst_iterator\fP last)\fC [inline]\fP"

.PP
inserts elements Inserts elements from range \fC[first, last)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIfirst\fP begin of the range of elements to insert 
.br
\fIlast\fP end of the range of elements to insert
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than objects; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if iterator \fIfirst\fP or \fIlast\fP does does not point to an object; example: \fC'iterators first and last must point to
objects'\fP 
.br
\fIinvalid_iterator\&.210\fP if \fIfirst\fP and \fIlast\fP do not belong to the same JSON value; example: \fC'iterators do not fit'\fP
.RE
.PP
@complexity Logarithmic: \fCO(N*log(\fBsize()\fP + N))\fP, where \fCN\fP is the number of elements to insert\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__range_object}
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::insert (\fBconst_iterator\fP pos, \fBbasic_json\fP && val)\fC [inline]\fP"

.PP
inserts element inserts element Inserts element \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns\fP
.RS 4
iterator pointing to the inserted \fIval\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
@complexity Constant plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::insert (\fBconst_iterator\fP pos, const \fBbasic_json\fP & val)\fC [inline]\fP"

.PP
inserts element Inserts element \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns\fP
.RS 4
iterator pointing to the inserted \fIval\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
@complexity Constant plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::insert (\fBconst_iterator\fP pos, \fBconst_iterator\fP first, \fBconst_iterator\fP last)\fC [inline]\fP"

.PP
inserts elements Inserts elements from range \fC[first, last)\fP before iterator \fIpos\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIfirst\fP begin of the range of elements to insert 
.br
\fIlast\fP end of the range of elements to insert
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP 
.br
\fIinvalid_iterator\&.210\fP if \fIfirst\fP and \fIlast\fP do not belong to the same JSON value; example: \fC'iterators do not fit'\fP 
.br
\fIinvalid_iterator\&.211\fP if \fIfirst\fP or \fIlast\fP are iterators into container for which insert is called; example: \fC'passed iterators may not
belong to container'\fP
.RE
.PP
\fBReturns\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCfirst==last\fP
.RE
.PP
@complexity Linear in \fCstd::distance(first, last)\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__range}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::insert (\fBconst_iterator\fP pos, \fBinitializer_list_t\fP ilist)\fC [inline]\fP"

.PP
inserts elements Inserts elements from initializer list \fIilist\fP before iterator \fIpos\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIilist\fP initializer list to insert the values from
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
\fBReturns\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCilist\fP is empty
.RE
.PP
@complexity Linear in \fCilist\&.size()\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__ilist}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiterator\fP nlohmann::basic_json::insert (\fBconst_iterator\fP pos, \fBsize_type\fP cnt, const \fBbasic_json\fP & val)\fC [inline]\fP"

.PP
inserts elements Inserts \fIcnt\fP copies of \fIval\fP before iterator \fIpos\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIpos\fP iterator before which the content will be inserted; may be the \fBend()\fP iterator 
.br
\fIcnt\fP number of copies of \fIval\fP to insert 
.br
\fIval\fP element to insert 
.RE
.PP
\fBReturns\fP
.RS 4
iterator pointing to the first element inserted, or \fIpos\fP if \fCcnt==0\fP
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.309\fP if called on JSON values other than arrays; example: \fC'cannot use insert() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if \fIpos\fP is not an iterator of *this; example: \fC'iterator does not fit current value'\fP
.RE
.PP
@complexity Linear in \fIcnt\fP plus linear in the distance between \fIpos\fP and end of the container\&.
.PP
@liveexample{The example shows how \fC\fBinsert()\fP\fP is used\&.,insert__count}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename\&.\&.\&. Args> \fBiterator\fP nlohmann::basic_json::insert_iterator (\fBconst_iterator\fP pos, Args &&\&.\&.\&. args)\fC [inline]\fP"
Helper for insertion of an iterator 
.PP
\fBNote\fP
.RS 4
: This uses std::distance to support GCC 4\&.8, see https://github.com/nlohmann/json/pull/1257 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_array () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is an array This function returns true if and only if the JSON value is an array\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is array, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_array()\fP\fP for all JSON types\&.,is_array}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_boolean () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is a boolean This function returns true if and only if the JSON value is a boolean\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is boolean, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_boolean()\fP\fP for all JSON types\&.,is_boolean}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_discarded () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is discarded This function returns true if and only if the JSON value was discarded during parsing with a callback function (see \fBparser_callback_t\fP)\&.
.PP
\fBNote\fP
.RS 4
This function will always be \fCfalse\fP for JSON values after parsing\&. That is, discarded values can only occur during parsing, but will be removed when inside a structured value or replaced by null in other cases\&.
.RE
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is discarded, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_discarded()\fP\fP for all JSON types\&.,is_discarded}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_null () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is null This function returns true if and only if the JSON value is null\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is null, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_null()\fP\fP for all JSON types\&.,is_null}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_number () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is a number This function returns true if and only if the JSON value is a number\&. This includes both integer (signed and unsigned) and floating-point values\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is number (regardless whether integer, unsigned integer or floating-type), \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_number()\fP\fP for all JSON types\&.,is_number}
.PP
\fBSee also\fP
.RS 4
\fBis_number_integer()\fP -- check \fBif\fP \fBvalue\fP is an integer or unsigned integer number 
.PP
\fBis_number_unsigned()\fP -- check \fBif\fP \fBvalue\fP is an unsigned integer number 
.PP
\fBis_number_float()\fP -- check \fBif\fP \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_number_float () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is a floating-point number This function returns true if and only if the JSON value is a floating-point number\&. This excludes signed and unsigned integer values\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is a floating-point number, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_number_float()\fP\fP for all JSON types\&.,is_number_float}
.PP
\fBSee also\fP
.RS 4
\fBis_number()\fP -- check \fBif\fP \fBvalue\fP is number 
.PP
\fBis_number_integer()\fP -- check \fBif\fP \fBvalue\fP is an integer number 
.PP
\fBis_number_unsigned()\fP -- check \fBif\fP \fBvalue\fP is an unsigned integer number
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_number_integer () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is an integer number This function returns true if and only if the JSON value is a signed or unsigned integer number\&. This excludes floating-point values\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is an integer or unsigned integer number, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_number_integer()\fP\fP for all JSON types\&.,is_number_integer}
.PP
\fBSee also\fP
.RS 4
\fBis_number()\fP -- check \fBif\fP \fBvalue\fP is a number 
.PP
\fBis_number_unsigned()\fP -- check \fBif\fP \fBvalue\fP is an unsigned integer number 
.PP
\fBis_number_float()\fP -- check \fBif\fP \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_number_unsigned () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is an unsigned integer number This function returns true if and only if the JSON value is an unsigned integer number\&. This excludes floating-point and signed integer values\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is an unsigned integer number, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_number_unsigned()\fP\fP for all JSON types\&.,is_number_unsigned}
.PP
\fBSee also\fP
.RS 4
\fBis_number()\fP -- check \fBif\fP \fBvalue\fP is a number 
.PP
\fBis_number_integer()\fP -- check \fBif\fP \fBvalue\fP is an integer or unsigned integer number 
.PP
\fBis_number_float()\fP -- check \fBif\fP \fBvalue\fP is a floating-point number
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_object () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is an object This function returns true if and only if the JSON value is an object\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is object, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_object()\fP\fP for all JSON types\&.,is_object}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_primitive () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether type is primitive This function returns true if and only if the JSON type is primitive (string, number, boolean, or null)\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is primitive (string, number, boolean, or null), \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_primitive()\fP\fP for all JSON types\&.,is_primitive}
.PP
\fBSee also\fP
.RS 4
\fBis_structured()\fP -- returns whether JSON \fBvalue\fP is structured 
.PP
\fBis_null()\fP -- returns whether JSON \fBvalue\fP is \fCnull\fP 
.PP
\fBis_string()\fP -- returns whether JSON \fBvalue\fP is a string 
.PP
\fBis_boolean()\fP -- returns whether JSON \fBvalue\fP is a boolean 
.PP
\fBis_number()\fP -- returns whether JSON \fBvalue\fP is a number
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_string () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether value is a string This function returns true if and only if the JSON value is a string\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is string, \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_string()\fP\fP for all JSON types\&.,is_string}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr bool nlohmann::basic_json::is_structured () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return whether type is structured This function returns true if and only if the JSON type is structured (array or object)\&.
.PP
\fBReturns\fP
.RS 4
\fCtrue\fP if type is structured (array or object), \fCfalse\fP otherwise\&.
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBis_structured()\fP\fP for all JSON types\&.,is_structured}
.PP
\fBSee also\fP
.RS 4
\fBis_primitive()\fP -- returns whether \fBvalue\fP is primitive 
.PP
\fBis_array()\fP -- returns whether \fBvalue\fP is an \fBarray\fP 
.PP
\fBis_object()\fP -- returns whether \fBvalue\fP is an \fBobject\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBiteration_proxy\fP<\fBconst_iterator\fP> nlohmann::basic_json::items () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
helper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
For loop without \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto it = j_object\&.begin(); it != j_object\&.end(); ++it)
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
Range-based for loop without \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto it : j_object)
{
    // "it" is of type json::reference and has no key() member
    std::cout << "value: " << it << '\n';
}
.fi
.PP
.PP
Range-based for loop with \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto& el : j_object\&.items())
{
    std::cout << "key: " << el\&.key() << ", value:" << el\&.value() << '\n';
}
.fi
.PP
.PP
The \fC\fBitems()\fP\fP function also allows to use \fCstructured bindings\fP (C++17):
.PP
.PP
.nf
for (auto& [key, val] : j_object\&.items())
{
    std::cout << "key: " << key << ", value:" << val << '\n';
}
.fi
.PP
.PP
\fBNote\fP
.RS 4
When iterating over an array, \fCkey()\fP will return the index of the element as string (see example)\&. For primitive types (e\&.g\&., numbers), \fCkey()\fP returns an empty string\&.
.RE
.PP
\fBReturns\fP
.RS 4
iteration proxy object wrapping \fIref\fP with an interface to use in range-based for loops
.RE
.PP
@liveexample{The following code shows how the function is used\&.,items}
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 3\&.1\&.0, structured bindings support since 3\&.5\&.0\&. 
.RE
.PP

.SS "\fBiteration_proxy\fP<\fBiterator\fP> nlohmann::basic_json::items ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
helper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
For loop without \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto it = j_object\&.begin(); it != j_object\&.end(); ++it)
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
Range-based for loop without \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto it : j_object)
{
    // "it" is of type json::reference and has no key() member
    std::cout << "value: " << it << '\n';
}
.fi
.PP
.PP
Range-based for loop with \fC\fBitems()\fP\fP function:
.PP
.PP
.nf
for (auto& el : j_object\&.items())
{
    std::cout << "key: " << el\&.key() << ", value:" << el\&.value() << '\n';
}
.fi
.PP
.PP
The \fC\fBitems()\fP\fP function also allows to use \fCstructured bindings\fP (C++17):
.PP
.PP
.nf
for (auto& [key, val] : j_object\&.items())
{
    std::cout << "key: " << key << ", value:" << val << '\n';
}
.fi
.PP
.PP
\fBNote\fP
.RS 4
When iterating over an array, \fCkey()\fP will return the index of the element as string (see example)\&. For primitive types (e\&.g\&., numbers), \fCkey()\fP returns an empty string\&.
.RE
.PP
\fBReturns\fP
.RS 4
iteration proxy object wrapping \fIref\fP with an interface to use in range-based for loops
.RE
.PP
@liveexample{The following code shows how the function is used\&.,items}
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
version 3\&.1\&.0, structured bindings support since 3\&.5\&.0\&. 
.RE
.PP

.SS "static \fBiteration_proxy\fP<\fBconst_iterator\fP> nlohmann::basic_json::iterator_wrapper (\fBconst_reference\fP ref)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"

.PP
wrapper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
For loop without iterator_wrapper:
.PP
.PP
.nf
for (auto it = j_object\&.begin(); it != j_object\&.end(); ++it)
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
Range-based for loop without iterator proxy:
.PP
.PP
.nf
for (auto it : j_object)
{
    // "it" is of type json::reference and has no key() member
    std::cout << "value: " << it << '\n';
}
.fi
.PP
.PP
Range-based for loop with iterator proxy:
.PP
.PP
.nf
for (auto it : json::iterator_wrapper(j_object))
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
\fBNote\fP
.RS 4
When iterating over an array, \fCkey()\fP will return the index of the element as string (see example)\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIref\fP reference to a JSON value 
.RE
.PP
\fBReturns\fP
.RS 4
iteration proxy object wrapping \fIref\fP with an interface to use in range-based for loops
.RE
.PP
@liveexample{The following code shows how the wrapper is used,iterator_wrapper}
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBNote\fP
.RS 4
The name of this function is not yet final and may change in the future\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
This stream operator is deprecated and will be removed in future 4\&.0\&.0 of the library\&. Please use \fBitems()\fP instead; that is, replace \fCjson::iterator_wrapper(j)\fP with \fCj\&.items()\fP\&. 
.RE
.PP

.SS "static \fBiteration_proxy\fP<\fBiterator\fP> nlohmann::basic_json::iterator_wrapper (\fBreference\fP ref)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP"

.PP
wrapper to access iterator member functions in range-based for This function allows to access \fBiterator::key()\fP and \fBiterator::value()\fP during range-based for loops\&. In these loops, a reference to the JSON values is returned, so there is no access to the underlying iterator\&.
.PP
For loop without iterator_wrapper:
.PP
.PP
.nf
for (auto it = j_object\&.begin(); it != j_object\&.end(); ++it)
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
Range-based for loop without iterator proxy:
.PP
.PP
.nf
for (auto it : j_object)
{
    // "it" is of type json::reference and has no key() member
    std::cout << "value: " << it << '\n';
}
.fi
.PP
.PP
Range-based for loop with iterator proxy:
.PP
.PP
.nf
for (auto it : json::iterator_wrapper(j_object))
{
    std::cout << "key: " << it\&.key() << ", value:" << it\&.value() << '\n';
}
.fi
.PP
.PP
\fBNote\fP
.RS 4
When iterating over an array, \fCkey()\fP will return the index of the element as string (see example)\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIref\fP reference to a JSON value 
.RE
.PP
\fBReturns\fP
.RS 4
iteration proxy object wrapping \fIref\fP with an interface to use in range-based for loops
.RE
.PP
@liveexample{The following code shows how the wrapper is used,iterator_wrapper}
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes in the JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBNote\fP
.RS 4
The name of this function is not yet final and may change in the future\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
This stream operator is deprecated and will be removed in future 4\&.0\&.0 of the library\&. Please use \fBitems()\fP instead; that is, replace \fCjson::iterator_wrapper(j)\fP with \fCj\&.items()\fP\&. 
.RE
.PP

.SS "\fBsize_type\fP nlohmann::basic_json::max_size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns the maximum possible number of elements Returns the maximum number of elements a JSON value is able to hold due to system or library implementation limitations, i\&.e\&. \fCstd::distance(\fBbegin()\fP, \fBend()\fP)\fP for the JSON value\&.
.PP
\fBReturns\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fC0\fP (same as \fC\fBsize()\fP\fP)  boolean \fC1\fP (same as \fC\fBsize()\fP\fP)  string \fC1\fP (same as \fC\fBsize()\fP\fP)  number \fC1\fP (same as \fC\fBsize()\fP\fP)  object result of function \fCobject_t::max_size()\fP  array result of function \fCarray_t::max_size()\fP  
.RE
.PP
@liveexample{The following code calls \fC\fBmax_size()\fP\fP on the different value types\&. Note the output is implementation specific\&.,max_size}
.PP
@complexity Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fC\fBmax_size()\fP\fP functions have constant complexity\&.
.PP
@iterators No changes\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of returning \fCb\&.size()\fP where \fCb\fP is the largest possible JSON value\&.
.PP
.PP
\fBSee also\fP
.RS 4
\fBsize()\fP -- returns the number of elements
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::merge_patch (const \fBbasic_json\fP & apply_patch)\fC [inline]\fP"

.PP
applies a JSON Merge Patch The merge patch format is primarily intended for use with the HTTP PATCH method as a means of describing a set of modifications to a target resource's content\&. This function applies a merge patch to the current JSON value\&.
.PP
The function implements the following algorithm from Section 2 of \fCRFC 7396 (JSON Merge Patch)\fP:
.PP
.PP
.nf
define MergePatch(Target, Patch):
  if Patch is an Object:
    if Target is not an Object:
      Target = {} // Ignore the contents and set it to an empty Object
    for each Name/Value pair in Patch:
      if Value is null:
        if Name exists in Target:
          remove the Name/Value pair from Target
      else:
        Target[Name] = MergePatch(Target[Name], Value)
    return Target
  else:
    return Patch
.fi
.PP
.PP
Thereby, \fCTarget\fP is the current object; that is, the patch is applied to the current value\&.
.PP
\fBParameters\fP
.RS 4
\fIapply_patch\fP the patch to apply
.RE
.PP
@complexity Linear in the lengths of \fIpatch\fP\&.
.PP
@liveexample{The following code shows how a JSON Merge Patch is applied to a JSON document\&.,merge_patch}
.PP
\fBSee also\fP
.RS 4
\fBpatch\fP -- apply a JSON \fBpatch\fP 
.PP
\fCRFC 7396 (JSON Merge Patch)\fP
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::meta ()\fC [inline]\fP, \fC [static]\fP"

.PP
returns version information on the library This function returns a JSON object with information about the library, including the version number and information on the platform and compiler\&.
.PP
\fBReturns\fP
.RS 4
JSON object holding version information key description  \fCcompiler\fP Information on the used compiler\&. It is an object with the following keys: \fCc++\fP (the used C++ standard), \fCfamily\fP (the compiler family; possible values are \fCclang\fP, \fCicc\fP, \fCgcc\fP, \fCilecpp\fP, \fCmsvc\fP, \fCpgcpp\fP, \fCsunpro\fP, and \fCunknown\fP), and \fCversion\fP (the compiler version)\&.  \fCcopyright\fP The copyright line for the library as string\&.  \fCname\fP The name of the library as string\&.  \fCplatform\fP The used platform as string\&. Possible values are \fCwin32\fP, \fClinux\fP, \fCapple\fP, \fCunix\fP, and \fCunknown\fP\&.  \fCurl\fP The URL of the project as string\&.  \fCversion\fP The version of the library\&. It is an object with the following keys: \fCmajor\fP, \fCminor\fP, and \fCpatch\fP as defined by \fCSemantic Versioning\fP, and \fCstring\fP (the version string)\&.  
.RE
.PP
@liveexample{The following code shows an example output of the \fC\fBmeta()\fP\fP function\&.,meta}
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@complexity Constant\&.
.PP
\fBSince\fP
.RS 4
2\&.1\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::object (\fBinitializer_list_t\fP init = \fC{}\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
explicitly create an object from an initializer list Creates a JSON object value from a given initializer list\&. The initializer lists elements must be pairs, and their first elements must be strings\&. If the initializer list is empty, the empty object \fC{}\fP is created\&.
.PP
\fBNote\fP
.RS 4
This function is only added for symmetry reasons\&. In contrast to the related function \fBarray(initializer_list_t)\fP, there are no cases which can only be expressed by this function\&. That is, any initializer list \fIinit\fP can also be passed to the initializer list constructor \fBbasic_json(initializer_list_t, bool, value_t)\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIinit\fP initializer list to create an object from (optional)
.RE
.PP
\fBReturns\fP
.RS 4
JSON object value
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.301\fP if \fIinit\fP is not a list of pairs whose first elements are strings\&. In this case, no object can be created\&. When such a value is passed to \fBbasic_json(initializer_list_t, bool, value_t)\fP, an array would have been created from the passed initializer list \fIinit\fP\&. See example below\&.
.RE
.PP
@complexity Linear in the size of \fIinit\fP\&.
.PP
@exceptionsafety Strong guarantee: if an exception is thrown, there are no changes to any JSON value\&.
.PP
@liveexample{The following code shows an example for the \fCobject\fP function\&.,object}
.PP
\fBSee also\fP
.RS 4
\fBbasic_json(initializer_list_t, bool, value_t)\fP -- create a JSON \fBvalue\fP from an initializer list 
.PP
\fBarray(initializer_list_t)\fP -- create a JSON \fBarray\fP \fBvalue\fP from an initializer list
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "constexpr nlohmann::basic_json::operator \fBvalue_t\fP () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return the type of the JSON value (implicit) Implicitly return the type of the JSON value as a value from the \fBvalue_t\fP enumeration\&.
.PP
\fBReturns\fP
.RS 4
the type of the JSON value
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies the \fBvalue_t\fP operator for all JSON types\&.,operator__value_t}
.PP
\fBSee also\fP
.RS 4
\fBtype()\fP -- return the \fBtype\fP of the JSON \fBvalue\fP (explicit) 
.PP
\fBtype_name()\fP -- return the \fBtype\fP as string
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ValueType , typename std::enable_if< not std::is_pointer< ValueType >::value and not std::is_same< ValueType, detail::json_ref< basic_json >>::value and not std::is_same< ValueType, typename string_t::value_type >::value and not detail::is_basic_json< ValueType >::value and not std::is_same< ValueType, std::initializer_list< typename string_t::value_type >>::value and not std::is_same< ValueType, typename std::string_view >::value and detail::is_detected< detail::get_template_function, const basic_json_t &, ValueType >::value, int >::type  = 0> nlohmann::basic_json::operator ValueType () const\fC [inline]\fP"

.PP
get a value (implicit) Implicit type conversion between the JSON value and a compatible value\&. The call is realized by calling \fBget() const\fP\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueType\fP non-pointer type compatible to the JSON value, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. The character type of \fBstring_t\fP as well as an initializer list of this type is excluded to avoid ambiguities as these types implicitly convert to \fCstd::string\fP\&.
.RE
.PP
\fBReturns\fP
.RS 4
copy of the JSON value, converted to type \fIValueType\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.302\fP in case passed type \fIValueType\fP is incompatible to the JSON value type (e\&.g\&., the JSON value is of type boolean, but a string is requested); see example below
.RE
.PP
@complexity Linear in the size of the JSON value\&.
.PP
@liveexample{The example below shows several conversions from JSON values to other types\&. There a few things to note: (1) Floating-point numbers can be converted to integers\\, (2) A JSON array can be converted to a standard \fCstd::vector<short>\fP\\, (3) A JSON object can be converted to C++ associative containers such as \fCstd::unordered_map<std::string\\, json>\fP\&.,operator__ValueType}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator+= (\fBbasic_json\fP && val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Amortized constant\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator+= (const \fBbasic_json\fP & val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Amortized constant\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator+= (const typename object_t::value_type & val)\fC [inline]\fP"

.PP
add an object to an object add an object to an object Inserts the given element \fIval\fP to the JSON object\&. If the function is called on a JSON null value, an empty object is created before inserting \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON object
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON object or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&.,push_back__object_t__value}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator+= (\fBinitializer_list_t\fP init)\fC [inline]\fP"

.PP
add an object to an object add an object to an object This function allows to use \fCpush_back\fP with an initializer list\&. In case
.PP
.IP "1." 4
the current value is an object,
.IP "2." 4
the initializer list \fIinit\fP contains only two elements, and
.IP "3." 4
the first element of \fIinit\fP is a string,
.PP
.PP
\fIinit\fP is converted into an object element and added using \fBpush_back(const typename object_t::value_type&)\fP\&. Otherwise, \fIinit\fP is converted to a JSON value and added using \fBpush_back(basic_json&&)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIinit\fP an initializer list
.RE
.PP
@complexity Linear in the size of the initializer list \fIinit\fP\&.
.PP
\fBNote\fP
.RS 4
This function is required to resolve an ambiguous overload error, because pairs like \fC{'key', 'value'}\fP can be both interpreted as \fCobject_t::value_type\fP or \fCstd::initializer_list<\fBbasic_json\fP>\fP, see https://github.com/nlohmann/json/issues/235 for more information\&.
.RE
.PP
@liveexample{The example shows how initializer lists are treated as objects when possible\&.,push_back__initializer_list} 
.SS "\fBbasic_json\fP& nlohmann::basic_json::operator= (\fBbasic_json\fP other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
copy assignment Copy assignment operator\&. Copies a JSON value via the 'copy and swap' strategy: It is expressed in terms of the copy constructor, destructor, and the \fC\fBswap()\fP\fP member function\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP value to copy from
.RE
.PP
@complexity Linear\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is linear\&.
.PP
.PP
@liveexample{The code below shows and example for the copy assignment\&. It creates a copy of value \fCa\fP which is then swapped with \fCb\fP\&. Finally\\, the copy of \fCa\fP (which is the null value after the swap) is destroyed\&.,basic_json__copyassignment}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator[] (const \fBjson_pointer\fP & ptr)\fC [inline]\fP"

.PP
access specified element via JSON Pointer Uses a JSON pointer to retrieve a reference to the respective JSON value\&. No bound checking is performed\&. Similar to \fBoperator[]\fP(const typename object_t::key_type&), \fCnull\fP values are created in arrays and objects if necessary\&.
.PP
In particular:
.IP "\(bu" 2
If the JSON pointer points to an object key that does not exist, it is created an filled with a \fCnull\fP value before a reference to it is returned\&.
.IP "\(bu" 2
If the JSON pointer points to an array index that does not exist, it is created an filled with a \fCnull\fP value before a reference to it is returned\&. All indices between the current maximum and the given index are also filled with \fCnull\fP\&.
.IP "\(bu" 2
The special value \fC-\fP is treated as a synonym for the index past the end\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIptr\fP a JSON pointer
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element pointed to by \fIptr\fP 
.RE
.PP
@complexity Constant\&.
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.106\fP if an array index begins with '0' 
.br
\fIparse_error\&.109\fP if an array index was not a number 
.br
\fIout_of_range\&.404\fP if the JSON pointer can not be resolved
.RE
.PP
@liveexample{The behavior is shown in the example\&.,operatorjson_pointer}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "\fBconst_reference\fP nlohmann::basic_json::operator[] (const \fBjson_pointer\fP & ptr) const\fC [inline]\fP"

.PP
access specified element via JSON Pointer Uses a JSON pointer to retrieve a reference to the respective JSON value\&. No bound checking is performed\&. The function does not change the JSON value; no \fCnull\fP values are created\&. In particular, the the special value \fC-\fP yields an exception\&.
.PP
\fBParameters\fP
.RS 4
\fIptr\fP JSON pointer to the desired element
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element pointed to by \fIptr\fP 
.RE
.PP
@complexity Constant\&.
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.106\fP if an array index begins with '0' 
.br
\fIparse_error\&.109\fP if an array index was not a number 
.br
\fIout_of_range\&.402\fP if the array index '-' is used 
.br
\fIout_of_range\&.404\fP if the JSON pointer can not be resolved
.RE
.PP
@liveexample{The behavior is shown in the example\&.,operatorjson_pointer_const}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator[] (const typename object_t::key_type & key)\fC [inline]\fP"

.PP
access specified object element Returns a reference to the element at with specified key \fIkey\fP\&.
.PP
\fBNote\fP
.RS 4
If \fIkey\fP is not found in the object, then it is silently added to the object and filled with a \fCnull\fP value to make \fCkey\fP a valid reference\&. In case the value was \fCnull\fP before, it is converted to an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be read and written using the \fC[]\fP operator\&.,operatorarray__key_type}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reference\fP nlohmann::basic_json::operator[] (const typename object_t::key_type & key) const\fC [inline]\fP"

.PP
read-only access specified object element Returns a const reference to the element at with specified key \fIkey\fP\&. No bounds checking is performed\&.
.PP
\fBWarning\fP
.RS 4
If the element with key \fIkey\fP does not exist, the behavior is undefined\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBPrecondition\fP
.RS 4
The element with key \fIkey\fP must exist\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an object; in that case, using the [] operator with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be read using the \fC[]\fP operator\&.,operatorarray__key_type_const}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreference\fP nlohmann::basic_json::operator[] (\fBsize_type\fP idx)\fC [inline]\fP"

.PP
access specified array element Returns a reference to the element at specified location \fIidx\fP\&.
.PP
\fBNote\fP
.RS 4
If \fIidx\fP is beyond the range of the array (i\&.e\&., \fCidx >= \fBsize()\fP\fP), then the array is silently filled up with \fCnull\fP values to make \fCidx\fP a valid reference to the last stored element\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an array or null; in that cases, using the [] operator with an index makes no sense\&.
.RE
.PP
@complexity Constant if \fIidx\fP is in the range of the array\&. Otherwise linear in \fCidx - \fBsize()\fP\fP\&.
.PP
@liveexample{The example below shows how array elements can be read and written using \fC[]\fP operator\&. Note the addition of \fCnull\fP values\&.,operatorarray__size_type}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reference\fP nlohmann::basic_json::operator[] (\fBsize_type\fP idx) const\fC [inline]\fP"

.PP
access specified array element Returns a const reference to the element at specified location \fIidx\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIidx\fP index of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element at index \fIidx\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an array; in that case, using the [] operator with an index makes no sense\&.
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how array elements can be read using the \fC[]\fP operator\&.,operatorarray__size_type_const}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename T > \fBreference\fP nlohmann::basic_json::operator[] (T * key)\fC [inline]\fP"

.PP
access specified object element Returns a reference to the element at with specified key \fIkey\fP\&.
.PP
\fBNote\fP
.RS 4
If \fIkey\fP is not found in the object, then it is silently added to the object and filled with a \fCnull\fP value to make \fCkey\fP a valid reference\&. In case the value was \fCnull\fP before, it is converted to an object\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
reference to the element at key \fIkey\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an object or null; in that cases, using the [] operator with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be read and written using the \fC[]\fP operator\&.,operatorarray__key_type}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "template<typename T > \fBconst_reference\fP nlohmann::basic_json::operator[] (T * key) const\fC [inline]\fP"

.PP
read-only access specified object element Returns a const reference to the element at with specified key \fIkey\fP\&. No bounds checking is performed\&.
.PP
\fBWarning\fP
.RS 4
If the element with key \fIkey\fP does not exist, the behavior is undefined\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access
.RE
.PP
\fBReturns\fP
.RS 4
const reference to the element at key \fIkey\fP 
.RE
.PP
\fBPrecondition\fP
.RS 4
The element with key \fIkey\fP must exist\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.305\fP if the JSON value is not an object; in that case, using the [] operator with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be read using the \fC[]\fP operator\&.,operatorarray__key_type_const}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBvalue()\fP for access by \fBvalue\fP with a default \fBvalue\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.1\&.0 
.RE
.PP

.SS "static \fBJSON_HEDLEY_WARN_UNUSED_RESULT\fP \fBbasic_json\fP nlohmann::basic_json::parse (\fBdetail::input_adapter\fP && i, const \fBparser_callback_t\fP cb = \fCnullptr\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from a compatible input This function reads from a compatible input\&. Examples are:
.IP "\(bu" 2
an array of 1-byte values
.IP "\(bu" 2
strings with character/literal type with size of 1 byte
.IP "\(bu" 2
input streams
.IP "\(bu" 2
container with contiguous storage of 1-byte values\&. Compatible container types include \fCstd::vector\fP, \fCstd::string\fP, \fCstd::array\fP, \fCstd::valarray\fP, and \fCstd::initializer_list\fP\&. Furthermore, C-style arrays can be used with \fCstd::begin()\fP/\fCstd::end()\fP\&. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage\&.
.PP
.PP
\fBPrecondition\fP
.RS 4
Each element of the container has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.PP
The container storage is contiguous\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBWarning\fP
.RS 4
There is no way to enforce all preconditions at compile-time\&. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP input to read from 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.101\fP if a parse error occurs; example: \fC''unexpected end of input; expected string literal''\fP 
.br
\fIparse_error\&.102\fP if to_unicode fails or surrogate error 
.br
\fIparse_error\&.103\fP if to_unicode fails
.RE
.PP
@complexity Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
@liveexample{The example below demonstrates the \fC\fBparse()\fP\fP function reading from an array\&.,parse__array__parser_callback_t}
.PP
@liveexample{The example below demonstrates the \fC\fBparse()\fP\fP function with and without callback function\&.,parse__string__parser_callback_t}
.PP
@liveexample{The example below demonstrates the \fC\fBparse()\fP\fP function with and without callback function\&.,parse__istream__parser_callback_t}
.PP
@liveexample{The example below demonstrates the \fC\fBparse()\fP\fP function reading from a contiguous container\&.,parse__contiguouscontainer__parser_callback_t}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.3 (contiguous containers) 
.RE
.PP

.SS "template<class IteratorType , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static \fBbasic_json\fP nlohmann::basic_json::parse (IteratorType first, IteratorType last, const \fBparser_callback_t\fP cb = \fCnullptr\fP, const bool allow_exceptions = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
deserialize from an iterator range with contiguous storage This function reads from an iterator range of a container with contiguous storage of 1-byte values\&. Compatible container types include \fCstd::vector\fP, \fCstd::string\fP, \fCstd::array\fP, \fCstd::valarray\fP, and \fCstd::initializer_list\fP\&. Furthermore, C-style arrays can be used with \fCstd::begin()\fP/\fCstd::end()\fP\&. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage\&.
.PP
\fBPrecondition\fP
.RS 4
The iterator range is contiguous\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with an assertion\&.\fP 
.PP
Each element in the range has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.RE
.PP
\fBWarning\fP
.RS 4
There is no way to enforce all preconditions at compile-time\&. If the function is called with noncompliant iterators and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation\&.
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIIteratorType\fP iterator of container with contiguous storage 
.RE
.PP
\fBParameters\fP
.RS 4
\fIfirst\fP begin of the range to parse (included) 
.br
\fIlast\fP end of the range to parse (excluded) 
.br
\fIcb\fP a parser callback function of type \fBparser_callback_t\fP which is used to control the deserialization by filtering unwanted values (optional) 
.br
\fIallow_exceptions\fP whether to throw exceptions in case of a parse error (optional, true by default)
.RE
.PP
\fBReturns\fP
.RS 4
deserialized JSON value; in case of a parse error and \fIallow_exceptions\fP set to \fCfalse\fP, the return value will be \fBvalue_t::discarded\fP\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.101\fP in case of an unexpected token 
.br
\fIparse_error\&.102\fP if to_unicode fails or surrogate error 
.br
\fIparse_error\&.103\fP if to_unicode fails
.RE
.PP
@complexity Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the parser callback function \fIcb\fP has a super-linear complexity\&.
.PP
\fBNote\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
@liveexample{The example below demonstrates the \fC\fBparse()\fP\fP function reading from an iterator range\&.,parse__iteratortype__parser_callback_t}
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.3 
.RE
.PP

.SS "\fBbasic_json\fP nlohmann::basic_json::patch (const \fBbasic_json\fP & json_patch) const\fC [inline]\fP"

.PP
applies a JSON patch \fCJSON Patch\fP defines a JSON document structure for expressing a sequence of operations to apply to a JSON) document\&. With this function, a JSON Patch is applied to the current JSON value by executing all operations from the patch\&.
.PP
\fBParameters\fP
.RS 4
\fIjson_patch\fP JSON patch document 
.RE
.PP
\fBReturns\fP
.RS 4
patched document
.RE
.PP
\fBNote\fP
.RS 4
The application of a patch is atomic: Either all operations succeed and the patched document is returned or an exception is thrown\&. In any case, the original value is not changed: the patch is applied to a copy of the value\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.104\fP if the JSON patch does not consist of an array of objects
.br
\fIparse_error\&.105\fP if the JSON patch is malformed (e\&.g\&., mandatory attributes are missing); example: \fC'operation add must have member path'\fP
.br
\fIout_of_range\&.401\fP if an array index is out of range\&.
.br
\fIout_of_range\&.403\fP if a JSON pointer inside the patch could not be resolved successfully in the current JSON value; example: \fC'key baz not
found'\fP
.br
\fIout_of_range\&.405\fP if JSON pointer has no parent ('add', 'remove', 'move')
.br
\fIother_error\&.501\fP if 'test' operation was unsuccessful
.RE
.PP
@complexity Linear in the size of the JSON value and the length of the JSON patch\&. As usually only a fraction of the JSON value is affected by the patch, the complexity can usually be neglected\&.
.PP
@liveexample{The following code shows how a JSON patch is applied to a value\&.,patch}
.PP
\fBSee also\fP
.RS 4
\fBdiff\fP -- create a JSON \fBpatch\fP by comparing two JSON values
.PP
\fCRFC 6902 (JSON Patch)\fP 
.PP
\fCRFC 6901 (JSON Pointer)\fP
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::push_back (\fBbasic_json\fP && val)\fC [inline]\fP"

.PP
add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Amortized constant\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::push_back (const \fBbasic_json\fP & val)\fC [inline]\fP"

.PP
add an object to an array add an object to an array Appends the given element \fIval\fP to the end of the JSON value\&. If the function is called on a JSON null value, an empty array is created before appending \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON array
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON array or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Amortized constant\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON array\&. Note how the \fCnull\fP value was silently converted to a JSON array\&.,push_back}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::push_back (const typename object_t::value_type & val)\fC [inline]\fP"

.PP
add an object to an object Inserts the given element \fIval\fP to the JSON object\&. If the function is called on a JSON null value, an empty object is created before inserting \fIval\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIval\fP the value to add to the JSON object
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.308\fP when called on a type other than JSON object or null; example: \fC'cannot use push_back() with number'\fP
.RE
.PP
@complexity Logarithmic in the size of the container, O(log(\fC\fBsize()\fP\fP))\&.
.PP
@liveexample{The example shows how \fC\fBpush_back()\fP\fP and \fC+=\fP can be used to add elements to a JSON object\&. Note how the \fCnull\fP value was silently converted to a JSON object\&.,push_back__object_t__value}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::push_back (\fBinitializer_list_t\fP init)\fC [inline]\fP"

.PP
add an object to an object This function allows to use \fCpush_back\fP with an initializer list\&. In case
.PP
.IP "1." 4
the current value is an object,
.IP "2." 4
the initializer list \fIinit\fP contains only two elements, and
.IP "3." 4
the first element of \fIinit\fP is a string,
.PP
.PP
\fIinit\fP is converted into an object element and added using \fBpush_back(const typename object_t::value_type&)\fP\&. Otherwise, \fIinit\fP is converted to a JSON value and added using \fBpush_back(basic_json&&)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIinit\fP an initializer list
.RE
.PP
@complexity Linear in the size of the initializer list \fIinit\fP\&.
.PP
\fBNote\fP
.RS 4
This function is required to resolve an ambiguous overload error, because pairs like \fC{'key', 'value'}\fP can be both interpreted as \fCobject_t::value_type\fP or \fCstd::initializer_list<\fBbasic_json\fP>\fP, see https://github.com/nlohmann/json/issues/235 for more information\&.
.RE
.PP
@liveexample{The example shows how initializer lists are treated as objects when possible\&.,push_back__initializer_list} 
.SS "\fBconst_reverse_iterator\fP nlohmann::basic_json::rbegin () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to the last element Returns a const iterator to the reverse-beginning; that is, the last element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrbegin()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcrbegin()\fP\fP\&.,crbegin}
.PP
\fBSee also\fP
.RS 4
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreverse_iterator\fP nlohmann::basic_json::rbegin ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the reverse-beginning Returns an iterator to the reverse-beginning; that is, the last element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCreverse_iterator(end())\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBrbegin()\fP\fP\&.,rbegin}
.PP
\fBSee also\fP
.RS 4
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning 
.PP
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBconst_reverse_iterator\fP nlohmann::basic_json::rend () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns a const reverse iterator to one before the first Returns a const reverse iterator to the reverse-end; that is, one before the first element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCconst_cast<const \fBbasic_json\fP&>(*this)\&.\fBrend()\fP\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBcrend()\fP\fP\&.,crend}
.PP
\fBSee also\fP
.RS 4
\fBrend()\fP -- returns a reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "\fBreverse_iterator\fP nlohmann::basic_json::rend ()\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns an iterator to the reverse-end Returns an iterator to the reverse-end; that is, one before the first element\&.
.PP
@complexity Constant\&.
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCReversibleContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCreverse_iterator(begin())\fP\&.
.PP
.PP
@liveexample{The following code shows an example for \fC\fBrend()\fP\fP\&.,rend}
.PP
\fBSee also\fP
.RS 4
\fBcrend()\fP -- returns a const reverse \fBiterator\fP to the \fBend\fP 
.PP
\fBrbegin()\fP -- returns a reverse \fBiterator\fP to the beginning 
.PP
\fBcrbegin()\fP -- returns a const reverse \fBiterator\fP to the beginning
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename SAX > static bool nlohmann::basic_json::sax_parse (\fBdetail::input_adapter\fP && i, SAX * sax, \fBinput_format_t\fP format = \fC\fBinput_format_t::json\fP\fP, const bool strict = \fCtrue\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
generate SAX events The SAX event lister must follow the interface of \fBjson_sax\fP\&.
.PP
This function reads from a compatible input\&. Examples are:
.IP "\(bu" 2
an array of 1-byte values
.IP "\(bu" 2
strings with character/literal type with size of 1 byte
.IP "\(bu" 2
input streams
.IP "\(bu" 2
container with contiguous storage of 1-byte values\&. Compatible container types include \fCstd::vector\fP, \fCstd::string\fP, \fCstd::array\fP, \fCstd::valarray\fP, and \fCstd::initializer_list\fP\&. Furthermore, C-style arrays can be used with \fCstd::begin()\fP/\fCstd::end()\fP\&. User-defined containers can be used as long as they implement random-access iterators and a contiguous storage\&.
.PP
.PP
\fBPrecondition\fP
.RS 4
Each element of the container has a size of 1 byte\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with a static assertion\&.\fP
.PP
The container storage is contiguous\&. Violating this precondition yields undefined behavior\&. \fBThis precondition is enforced with an assertion\&.\fP
.RE
.PP
\fBWarning\fP
.RS 4
There is no way to enforce all preconditions at compile-time\&. If the function is called with a noncompliant container and with assertions switched off, the behavior is undefined and will most likely yield segmentation violation\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIi\fP input to read from 
.br
\fIsax\fP SAX event listener 
.br
\fIformat\fP the format to parse (JSON, CBOR, MessagePack, or UBJSON) 
.br
\fIstrict\fP whether the input has to be consumed completely
.RE
.PP
\fBReturns\fP
.RS 4
return value of the last processed SAX event
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.101\fP if a parse error occurs; example: \fC''unexpected end of input; expected string literal''\fP 
.br
\fIparse_error\&.102\fP if to_unicode fails or surrogate error 
.br
\fIparse_error\&.103\fP if to_unicode fails
.RE
.PP
@complexity Linear in the length of the input\&. The parser is a predictive LL(1) parser\&. The complexity can be higher if the SAX consumer \fIsax\fP has a super-linear complexity\&.
.PP
\fBNote\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
@liveexample{The example below demonstrates the \fC\fBsax_parse()\fP\fP function reading from string and processing the events with a user-defined SAX event consumer\&.,sax_parse}
.PP
\fBSince\fP
.RS 4
version 3\&.2\&.0 
.RE
.PP

.SS "template<class IteratorType , class SAX , typename std::enable_if< std::is_base_of< std::random_access_iterator_tag, typename std::iterator_traits< IteratorType >::iterator_category >::value, int >::type  = 0> static bool nlohmann::basic_json::sax_parse (IteratorType first, IteratorType last, SAX * sax)\fC [inline]\fP, \fC [static]\fP"

.SS "\fBsize_type\fP nlohmann::basic_json::size () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
returns the number of elements Returns the number of elements in a JSON value\&.
.PP
\fBReturns\fP
.RS 4
The return value depends on the different types and is defined as follows: Value type return value  null \fC0\fP  boolean \fC1\fP  string \fC1\fP  number \fC1\fP  object result of function object_t::size()  array result of function array_t::size()  
.RE
.PP
@liveexample{The following code calls \fC\fBsize()\fP\fP on the different value types\&.,size}
.PP
@complexity Constant, as long as \fBarray_t\fP and \fBobject_t\fP satisfy the Container concept; that is, their \fBsize()\fP functions have constant complexity\&.
.PP
@iterators No changes\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
\fBNote\fP
.RS 4
This function does not return the length of a string stored as JSON value - it returns the number of elements in the JSON value which is 1 in the case of a string\&.
.RE
.PP
@requirement This function helps \fC\fBbasic_json\fP\fP satisfying the \fCContainer\fP requirements:
.IP "\(bu" 2
The complexity is constant\&.
.IP "\(bu" 2
Has the semantics of \fCstd::distance(\fBbegin()\fP, \fBend()\fP)\fP\&.
.PP
.PP
\fBSee also\fP
.RS 4
\fBempty()\fP -- checks whether the container is \fBempty\fP 
.PP
\fBmax_size()\fP -- returns the maximal number of elements
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::swap (\fBarray_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON array with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP array to exchange the contents with
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.310\fP when JSON value is not an array; example: \fC'cannot
use swap() with string'\fP
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how arrays can be swapped with \fC\fBswap()\fP\fP\&.,swap__array_t}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::swap (\fBobject_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON object with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP object to exchange the contents with
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.310\fP when JSON value is not an object; example: \fC'cannot use swap() with string'\fP
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how objects can be swapped with \fC\fBswap()\fP\fP\&.,swap__object_t}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::swap (\fBreference\fP other)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
exchanges the values Exchanges the contents of the JSON value with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP JSON value to exchange the contents with
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how JSON values can be swapped with \fC\fBswap()\fP\fP\&.,swap__reference}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::swap (\fBstring_t\fP & other)\fC [inline]\fP"

.PP
exchanges the values Exchanges the contents of a JSON string with those of \fIother\fP\&. Does not invoke any move, copy, or swap operations on individual elements\&. All iterators and references remain valid\&. The past-the-end iterator is invalidated\&.
.PP
\fBParameters\fP
.RS 4
\fIother\fP string to exchange the contents with
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.310\fP when JSON value is not a string; example: \fC'cannot
use swap() with boolean'\fP
.RE
.PP
@complexity Constant\&.
.PP
@liveexample{The example below shows how strings can be swapped with \fC\fBswap()\fP\fP\&.,swap__string_t}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "static std::vector<uint8_t> nlohmann::basic_json::to_bson (const \fBbasic_json\fP & j)\fC [inline]\fP, \fC [static]\fP"

.PP
Serializes the given JSON object \fCj\fP to BSON and returns a vector containing the corresponding BSON-representation\&. BSON (Binary JSON) is a binary format in which zero or more ordered key/value pairs are stored as a single entity (a so-called document)\&.
.PP
The library uses the following mapping from JSON values types to BSON types:
.PP
JSON value type value/range BSON type marker  null \fCnull\fP null 0x0A  boolean \fCtrue\fP, \fCfalse\fP boolean 0x08  number_integer -9223372036854775808\&.\&.-2147483649 int64 0x12  number_integer -2147483648\&.\&.2147483647 int32 0x10  number_integer 2147483648\&.\&.9223372036854775807 int64 0x12  number_unsigned 0\&.\&.2147483647 int32 0x10  number_unsigned 2147483648\&.\&.9223372036854775807 int64 0x12  number_unsigned 9223372036854775808\&.\&.18446744073709551615 -- --  number_float \fIany value\fP double 0x01  string \fIany value\fP string 0x02  array \fIany value\fP document 0x04  object \fIany value\fP document 0x03  
.PP
\fBWarning\fP
.RS 4
The mapping is \fBincomplete\fP, since only JSON-objects (and things contained therein) can be serialized to BSON\&. Also, integers larger than 9223372036854775807 cannot be serialized to BSON, and the keys may not contain U+0000, since they are serialized a zero-terminated c-strings\&.
.RE
.PP
\fBExceptions\fP
.RS 4
\fIout_of_range\&.407\fP if \fCj\&.is_number_unsigned() && j\&.get<std::uint64_t>() > 9223372036854775807\fP 
.br
\fIout_of_range\&.409\fP if a key in \fCj\fP contains a NULL (U+0000) 
.br
\fItype_error\&.317\fP if \fC!j\&.\fBis_object()\fP\fP
.RE
.PP
\fBPrecondition\fP
.RS 4
The input \fCj\fP is required to be an object: \fCj\&.is_object() == true\fP\&.
.RE
.PP
\fBNote\fP
.RS 4
Any BSON output created via \fBto_bson\fP can be successfully parsed by \fBfrom_bson\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBReturns\fP
.RS 4
BSON serialization as byte vector
.RE
.PP
@complexity Linear in the size of the JSON value \fIj\fP\&.
.PP
@liveexample{The example shows the serialization of a JSON value to a byte vector in BSON format\&.,to_bson}
.PP
\fBSee also\fP
.RS 4
http://bsonspec.org/spec.html 
.PP
\fBfrom_bson(detail::input_adapter&&, const bool strict)\fP for the analogous deserialization 
.PP
\fBto_ubjson(const basic_json&, const bool, const bool)\fP for the related UBJSON format 
.PP
\fBto_cbor(const basic_json&)\fP for the related CBOR format 
.PP
\fBto_msgpack(const basic_json&)\fP for the related MessagePack format 
.RE
.PP

.SS "static void nlohmann::basic_json::to_bson (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< char > o)\fC [inline]\fP, \fC [static]\fP"

.PP
Serializes the given JSON object \fCj\fP to BSON and forwards the corresponding BSON-representation to the given output_adapter \fCo\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIj\fP The JSON object to convert to BSON\&. 
.br
\fIo\fP The output adapter that receives the binary BSON representation\&. 
.RE
.PP
\fBPrecondition\fP
.RS 4
The input \fCj\fP shall be an object: \fCj\&.is_object() == true\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBto_bson(const basic_json&)\fP 
.RE
.PP

.SS "static void nlohmann::basic_json::to_bson (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< uint8_t > o)\fC [inline]\fP, \fC [static]\fP"

.PP
Serializes the given JSON object \fCj\fP to BSON and forwards the corresponding BSON-representation to the given output_adapter \fCo\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIj\fP The JSON object to convert to BSON\&. 
.br
\fIo\fP The output adapter that receives the binary BSON representation\&. 
.RE
.PP
\fBPrecondition\fP
.RS 4
The input \fCj\fP shall be an object: \fCj\&.is_object() == true\fP 
.RE
.PP
\fBSee also\fP
.RS 4
\fBto_bson(const basic_json&)\fP 
.RE
.PP

.SS "static std::vector<uint8_t> nlohmann::basic_json::to_cbor (const \fBbasic_json\fP & j)\fC [inline]\fP, \fC [static]\fP"

.PP
create a CBOR serialization of a given JSON value Serializes a given JSON value \fIj\fP to a byte vector using the CBOR (Concise Binary Object Representation) serialization format\&. CBOR is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse\&.
.PP
The library uses the following mapping from JSON values types to CBOR types according to the CBOR specification (RFC 7049):
.PP
JSON value type value/range CBOR type first byte  null \fCnull\fP Null 0xF6  boolean \fCtrue\fP True 0xF5  boolean \fCfalse\fP False 0xF4  number_integer -9223372036854775808\&.\&.-2147483649 Negative integer (8 bytes follow) 0x3B  number_integer -2147483648\&.\&.-32769 Negative integer (4 bytes follow) 0x3A  number_integer -32768\&.\&.-129 Negative integer (2 bytes follow) 0x39  number_integer -128\&.\&.-25 Negative integer (1 byte follow) 0x38  number_integer -24\&.\&.-1 Negative integer 0x20\&.\&.0x37  number_integer 0\&.\&.23 Integer 0x00\&.\&.0x17  number_integer 24\&.\&.255 Unsigned integer (1 byte follow) 0x18  number_integer 256\&.\&.65535 Unsigned integer (2 bytes follow) 0x19  number_integer 65536\&.\&.4294967295 Unsigned integer (4 bytes follow) 0x1A  number_integer 4294967296\&.\&.18446744073709551615 Unsigned integer (8 bytes follow) 0x1B  number_unsigned 0\&.\&.23 Integer 0x00\&.\&.0x17  number_unsigned 24\&.\&.255 Unsigned integer (1 byte follow) 0x18  number_unsigned 256\&.\&.65535 Unsigned integer (2 bytes follow) 0x19  number_unsigned 65536\&.\&.4294967295 Unsigned integer (4 bytes follow) 0x1A  number_unsigned 4294967296\&.\&.18446744073709551615 Unsigned integer (8 bytes follow) 0x1B  number_float \fIany value\fP Double-Precision Float 0xFB  string \fIlength\fP: 0\&.\&.23 UTF-8 string 0x60\&.\&.0x77  string \fIlength\fP: 23\&.\&.255 UTF-8 string (1 byte follow) 0x78  string \fIlength\fP: 256\&.\&.65535 UTF-8 string (2 bytes follow) 0x79  string \fIlength\fP: 65536\&.\&.4294967295 UTF-8 string (4 bytes follow) 0x7A  string \fIlength\fP: 4294967296\&.\&.18446744073709551615 UTF-8 string (8 bytes follow) 0x7B  array \fIsize\fP: 0\&.\&.23 array 0x80\&.\&.0x97  array \fIsize\fP: 23\&.\&.255 array (1 byte follow) 0x98  array \fIsize\fP: 256\&.\&.65535 array (2 bytes follow) 0x99  array \fIsize\fP: 65536\&.\&.4294967295 array (4 bytes follow) 0x9A  array \fIsize\fP: 4294967296\&.\&.18446744073709551615 array (8 bytes follow) 0x9B  object \fIsize\fP: 0\&.\&.23 map 0xA0\&.\&.0xB7  object \fIsize\fP: 23\&.\&.255 map (1 byte follow) 0xB8  object \fIsize\fP: 256\&.\&.65535 map (2 bytes follow) 0xB9  object \fIsize\fP: 65536\&.\&.4294967295 map (4 bytes follow) 0xBA  object \fIsize\fP: 4294967296\&.\&.18446744073709551615 map (8 bytes follow) 0xBB  
.PP
\fBNote\fP
.RS 4
The mapping is \fBcomplete\fP in the sense that any JSON value type can be converted to a CBOR value\&.
.PP
If NaN or Infinity are stored inside a JSON number, they are serialized properly\&. This behavior differs from the \fBdump()\fP function which serializes NaN or Infinity to \fCnull\fP\&.
.PP
The following CBOR types are not used in the conversion:
.IP "\(bu" 2
byte strings (0x40\&.\&.0x5F)
.IP "\(bu" 2
UTF-8 strings terminated by 'break' (0x7F)
.IP "\(bu" 2
arrays terminated by 'break' (0x9F)
.IP "\(bu" 2
maps terminated by 'break' (0xBF)
.IP "\(bu" 2
date/time (0xC0\&.\&.0xC1)
.IP "\(bu" 2
bignum (0xC2\&.\&.0xC3)
.IP "\(bu" 2
decimal fraction (0xC4)
.IP "\(bu" 2
bigfloat (0xC5)
.IP "\(bu" 2
tagged items (0xC6\&.\&.0xD4, 0xD8\&.\&.0xDB)
.IP "\(bu" 2
expected conversions (0xD5\&.\&.0xD7)
.IP "\(bu" 2
simple values (0xE0\&.\&.0xF3, 0xF8)
.IP "\(bu" 2
undefined (0xF7)
.IP "\(bu" 2
half and single-precision floats (0xF9-0xFA)
.IP "\(bu" 2
break (0xFF)
.PP
.RE
.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBReturns\fP
.RS 4
MessagePack serialization as byte vector
.RE
.PP
@complexity Linear in the size of the JSON value \fIj\fP\&.
.PP
@liveexample{The example shows the serialization of a JSON value to a byte vector in CBOR format\&.,to_cbor}
.PP
\fBSee also\fP
.RS 4
http://cbor.io 
.PP
\fBfrom_cbor(detail::input_adapter&&, const bool, const bool)\fP for the analogous deserialization 
.PP
\fBto_msgpack(const basic_json&)\fP for the related MessagePack format 
.PP
\fBto_ubjson(const basic_json&, const bool, const bool)\fP for the related UBJSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9 
.RE
.PP

.SS "static void nlohmann::basic_json::to_cbor (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< char > o)\fC [inline]\fP, \fC [static]\fP"

.SS "static void nlohmann::basic_json::to_cbor (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< uint8_t > o)\fC [inline]\fP, \fC [static]\fP"

.SS "static std::vector<uint8_t> nlohmann::basic_json::to_msgpack (const \fBbasic_json\fP & j)\fC [inline]\fP, \fC [static]\fP"

.PP
create a MessagePack serialization of a given JSON value Serializes a given JSON value \fIj\fP to a byte vector using the MessagePack serialization format\&. MessagePack is a binary serialization format which aims to be more compact than JSON itself, yet more efficient to parse\&.
.PP
The library uses the following mapping from JSON values types to MessagePack types according to the MessagePack specification:
.PP
JSON value type value/range MessagePack type first byte  null \fCnull\fP nil 0xC0  boolean \fCtrue\fP true 0xC3  boolean \fCfalse\fP false 0xC2  number_integer -9223372036854775808\&.\&.-2147483649 int64 0xD3  number_integer -2147483648\&.\&.-32769 int32 0xD2  number_integer -32768\&.\&.-129 int16 0xD1  number_integer -128\&.\&.-33 int8 0xD0  number_integer -32\&.\&.-1 negative fixint 0xE0\&.\&.0xFF  number_integer 0\&.\&.127 positive fixint 0x00\&.\&.0x7F  number_integer 128\&.\&.255 uint 8 0xCC  number_integer 256\&.\&.65535 uint 16 0xCD  number_integer 65536\&.\&.4294967295 uint 32 0xCE  number_integer 4294967296\&.\&.18446744073709551615 uint 64 0xCF  number_unsigned 0\&.\&.127 positive fixint 0x00\&.\&.0x7F  number_unsigned 128\&.\&.255 uint 8 0xCC  number_unsigned 256\&.\&.65535 uint 16 0xCD  number_unsigned 65536\&.\&.4294967295 uint 32 0xCE  number_unsigned 4294967296\&.\&.18446744073709551615 uint 64 0xCF  number_float \fIany value\fP float 64 0xCB  string \fIlength\fP: 0\&.\&.31 fixstr 0xA0\&.\&.0xBF  string \fIlength\fP: 32\&.\&.255 str 8 0xD9  string \fIlength\fP: 256\&.\&.65535 str 16 0xDA  string \fIlength\fP: 65536\&.\&.4294967295 str 32 0xDB  array \fIsize\fP: 0\&.\&.15 fixarray 0x90\&.\&.0x9F  array \fIsize\fP: 16\&.\&.65535 array 16 0xDC  array \fIsize\fP: 65536\&.\&.4294967295 array 32 0xDD  object \fIsize\fP: 0\&.\&.15 fix map 0x80\&.\&.0x8F  object \fIsize\fP: 16\&.\&.65535 map 16 0xDE  object \fIsize\fP: 65536\&.\&.4294967295 map 32 0xDF  
.PP
\fBNote\fP
.RS 4
The mapping is \fBcomplete\fP in the sense that any JSON value type can be converted to a MessagePack value\&.
.PP
The following values can \fBnot\fP be converted to a MessagePack value:
.IP "\(bu" 2
strings with more than 4294967295 bytes
.IP "\(bu" 2
arrays with more than 4294967295 elements
.IP "\(bu" 2
objects with more than 4294967295 elements
.PP
.PP
The following MessagePack types are not used in the conversion:
.IP "\(bu" 2
bin 8 - bin 32 (0xC4\&.\&.0xC6)
.IP "\(bu" 2
ext 8 - ext 32 (0xC7\&.\&.0xC9)
.IP "\(bu" 2
float 32 (0xCA)
.IP "\(bu" 2
fixext 1 - fixext 16 (0xD4\&.\&.0xD8)
.PP
.PP
Any MessagePack output created \fBto_msgpack\fP can be successfully parsed by \fBfrom_msgpack\fP\&.
.PP
If NaN or Infinity are stored inside a JSON number, they are serialized properly\&. This behavior differs from the \fBdump()\fP function which serializes NaN or Infinity to \fCnull\fP\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.RE
.PP
\fBReturns\fP
.RS 4
MessagePack serialization as byte vector
.RE
.PP
@complexity Linear in the size of the JSON value \fIj\fP\&.
.PP
@liveexample{The example shows the serialization of a JSON value to a byte vector in MessagePack format\&.,to_msgpack}
.PP
\fBSee also\fP
.RS 4
http://msgpack.org 
.PP
\fBfrom_msgpack\fP for the analogous deserialization 
.PP
\fBto_cbor\fP(const \fBbasic_json\fP& for the related CBOR format 
.PP
\fBto_ubjson(const basic_json&, const bool, const bool)\fP for the related UBJSON format
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.9 
.RE
.PP

.SS "static void nlohmann::basic_json::to_msgpack (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< char > o)\fC [inline]\fP, \fC [static]\fP"

.SS "static void nlohmann::basic_json::to_msgpack (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< uint8_t > o)\fC [inline]\fP, \fC [static]\fP"

.SS "static std::vector<uint8_t> nlohmann::basic_json::to_ubjson (const \fBbasic_json\fP & j, const bool use_size = \fCfalse\fP, const bool use_type = \fCfalse\fP)\fC [inline]\fP, \fC [static]\fP"

.PP
create a UBJSON serialization of a given JSON value Serializes a given JSON value \fIj\fP to a byte vector using the UBJSON (Universal Binary JSON) serialization format\&. UBJSON aims to be more compact than JSON itself, yet more efficient to parse\&.
.PP
The library uses the following mapping from JSON values types to UBJSON types according to the UBJSON specification:
.PP
JSON value type value/range UBJSON type marker  null \fCnull\fP null \fCZ\fP  boolean \fCtrue\fP true \fCT\fP  boolean \fCfalse\fP false \fCF\fP  number_integer -9223372036854775808\&.\&.-2147483649 int64 \fCL\fP  number_integer -2147483648\&.\&.-32769 int32 \fCl\fP  number_integer -32768\&.\&.-129 int16 \fCI\fP  number_integer -128\&.\&.127 int8 \fCi\fP  number_integer 128\&.\&.255 uint8 \fCU\fP  number_integer 256\&.\&.32767 int16 \fCI\fP  number_integer 32768\&.\&.2147483647 int32 \fCl\fP  number_integer 2147483648\&.\&.9223372036854775807 int64 \fCL\fP  number_unsigned 0\&.\&.127 int8 \fCi\fP  number_unsigned 128\&.\&.255 uint8 \fCU\fP  number_unsigned 256\&.\&.32767 int16 \fCI\fP  number_unsigned 32768\&.\&.2147483647 int32 \fCl\fP  number_unsigned 2147483648\&.\&.9223372036854775807 int64 \fCL\fP  number_float \fIany value\fP float64 \fCD\fP  string \fIwith shortest length indicator\fP string \fCS\fP  array \fIsee notes on optimized format\fP array \fC[\fP  object \fIsee notes on optimized format\fP map \fC{\fP  
.PP
\fBNote\fP
.RS 4
The mapping is \fBcomplete\fP in the sense that any JSON value type can be converted to a UBJSON value\&.
.PP
The following values can \fBnot\fP be converted to a UBJSON value:
.IP "\(bu" 2
strings with more than 9223372036854775807 bytes (theoretical)
.IP "\(bu" 2
unsigned integer numbers above 9223372036854775807
.PP
.PP
The following markers are not used in the conversion:
.IP "\(bu" 2
\fCZ\fP: no-op values are not created\&.
.IP "\(bu" 2
\fCC\fP: single-byte strings are serialized with \fCS\fP markers\&.
.PP
.PP
Any UBJSON output created \fBto_ubjson\fP can be successfully parsed by \fBfrom_ubjson\fP\&.
.PP
If NaN or Infinity are stored inside a JSON number, they are serialized properly\&. This behavior differs from the \fBdump()\fP function which serializes NaN or Infinity to \fCnull\fP\&.
.PP
The optimized formats for containers are supported: Parameter \fIuse_size\fP adds size information to the beginning of a container and removes the closing marker\&. Parameter \fIuse_type\fP further checks whether all elements of a container have the same type and adds the type marker to the beginning of the container\&. The \fIuse_type\fP parameter must only be used together with \fIuse_size\fP = true\&. Note that \fIuse_size\fP = true alone may result in larger representations - the benefit of this parameter is that the receiving side is immediately informed on the number of elements of the container\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON value to serialize 
.br
\fIuse_size\fP whether to add size annotations to container types 
.br
\fIuse_type\fP whether to add type annotations to container types (must be combined with \fIuse_size\fP = true) 
.RE
.PP
\fBReturns\fP
.RS 4
UBJSON serialization as byte vector
.RE
.PP
@complexity Linear in the size of the JSON value \fIj\fP\&.
.PP
@liveexample{The example shows the serialization of a JSON value to a byte vector in UBJSON format\&.,to_ubjson}
.PP
\fBSee also\fP
.RS 4
http://ubjson.org 
.PP
\fBfrom_ubjson(detail::input_adapter&&, const bool, const bool)\fP for the analogous deserialization 
.PP
\fBto_cbor\fP(const \fBbasic_json\fP& for the related CBOR format 
.PP
\fBto_msgpack(const basic_json&)\fP for the related MessagePack format
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.1\&.0 
.RE
.PP

.SS "static void nlohmann::basic_json::to_ubjson (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< char > o, const bool use_size = \fCfalse\fP, const bool use_type = \fCfalse\fP)\fC [inline]\fP, \fC [static]\fP"

.SS "static void nlohmann::basic_json::to_ubjson (const \fBbasic_json\fP & j, \fBdetail::output_adapter\fP< uint8_t > o, const bool use_size = \fCfalse\fP, const bool use_type = \fCfalse\fP)\fC [inline]\fP, \fC [static]\fP"

.SS "constexpr \fBvalue_t\fP nlohmann::basic_json::type () const\fC [inline]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
return the type of the JSON value (explicit) Return the type of the JSON value as a value from the \fBvalue_t\fP enumeration\&.
.PP
\fBReturns\fP
.RS 4
the type of the JSON value Value type return value  null \fBvalue_t::null\fP  boolean \fBvalue_t::boolean\fP  string \fBvalue_t::string\fP  number (integer) \fBvalue_t::number_integer\fP  number (unsigned integer) \fBvalue_t::number_unsigned\fP  number (floating-point) \fBvalue_t::number_float\fP  object \fBvalue_t::object\fP  array \fBvalue_t::array\fP  discarded \fBvalue_t::discarded\fP  
.RE
.PP
@complexity Constant\&.
.PP
@exceptionsafety No-throw guarantee: this member function never throws exceptions\&.
.PP
@liveexample{The following code exemplifies \fC\fBtype()\fP\fP for all JSON types\&.,type}
.PP
\fBSee also\fP
.RS 4
\fBoperator value_t()\fP -- return the \fBtype\fP of the JSON \fBvalue\fP (implicit) 
.PP
\fBtype_name()\fP -- return the \fBtype\fP as string
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "const \fBJSON_HEDLEY_RETURNS_NON_NULL\fP char* nlohmann::basic_json::type_name () const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
return the type as string Returns the type name as string to be used in error messages - usually to indicate that a function was called on a wrong JSON type\&.
.PP
\fBReturns\fP
.RS 4
a string representation of a the \fIm_type\fP member: Value type return value  null \fC'null'\fP  boolean \fC'boolean'\fP  string \fC'string'\fP  number \fC'number'\fP (for all number types)  object \fC'object'\fP  array \fC'array'\fP  discarded \fC'discarded'\fP  
.RE
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@complexity Constant\&.
.PP
@liveexample{The following code exemplifies \fC\fBtype_name()\fP\fP for all JSON types\&.,type_name}
.PP
\fBSee also\fP
.RS 4
\fBtype()\fP -- return the \fBtype\fP of the JSON \fBvalue\fP 
.PP
\fBoperator value_t()\fP -- return the \fBtype\fP of the JSON \fBvalue\fP (implicit)
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0, public since 2\&.1\&.0, \fCconst char*\fP and \fCnoexcept\fP since 3\&.0\&.0 
.RE
.PP

.SS "\fBbasic_json\fP nlohmann::basic_json::unflatten () const\fC [inline]\fP"

.PP
unflatten a previously flattened JSON value The function restores the arbitrary nesting of a JSON value that has been flattened before using the \fBflatten()\fP function\&. The JSON value must meet certain constraints:
.IP "1." 4
The value must be an object\&.
.IP "2." 4
The keys must be JSON pointers (see \fCRFC 6901\fP)
.IP "3." 4
The mapped values must be primitive JSON types\&.
.PP
.PP
\fBReturns\fP
.RS 4
the original JSON from a flattened version
.RE
.PP
\fBNote\fP
.RS 4
Empty objects and arrays are flattened by \fBflatten()\fP to \fCnull\fP values and can not unflattened to their original type\&. Apart from this example, for a JSON value \fCj\fP, the following is always true: \fCj == j\&.flatten()\&.\fBunflatten()\fP\fP\&.
.RE
.PP
@complexity Linear in the size the JSON value\&.
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.314\fP if value is not an object 
.br
\fItype_error\&.315\fP if object values are not primitive
.RE
.PP
@liveexample{The following code shows how a flattened JSON object is unflattened into the original nested JSON object\&.,unflatten}
.PP
\fBSee also\fP
.RS 4
\fBflatten()\fP for the reverse function
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::update (\fBconst_iterator\fP first, \fBconst_iterator\fP last)\fC [inline]\fP"

.PP
updates a JSON object from another object, overwriting existing keys Inserts all values from from range \fC[first, last)\fP and overwrites existing keys\&.
.PP
\fBParameters\fP
.RS 4
\fIfirst\fP begin of the range of elements to insert 
.br
\fIlast\fP end of the range of elements to insert
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.312\fP if called on JSON values other than objects; example: \fC'cannot use update() with string'\fP 
.br
\fIinvalid_iterator\&.202\fP if iterator \fIfirst\fP or \fIlast\fP does does not point to an object; example: \fC'iterators first and last must point to
objects'\fP 
.br
\fIinvalid_iterator\&.210\fP if \fIfirst\fP and \fIlast\fP do not belong to the same JSON value; example: \fC'iterators do not fit'\fP
.RE
.PP
@complexity O(N*log(\fBsize()\fP + N)), where N is the number of elements to insert\&.
.PP
@liveexample{The example shows how \fC\fBupdate()\fP\fP is used__range\&.,update}
.PP
\fBSee also\fP
.RS 4
https://docs.python.org/3.6/library/stdtypes.html#dict.update
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "void nlohmann::basic_json::update (\fBconst_reference\fP j)\fC [inline]\fP"

.PP
updates a JSON object from another object, overwriting existing keys Inserts all values from JSON object \fIj\fP and overwrites existing keys\&.
.PP
\fBParameters\fP
.RS 4
\fIj\fP JSON object to read values from
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.312\fP if called on JSON values other than objects; example: \fC'cannot use update() with string'\fP
.RE
.PP
@complexity O(N*log(\fBsize()\fP + N)), where N is the number of elements to insert\&.
.PP
@liveexample{The example shows how \fC\fBupdate()\fP\fP is used\&.,update}
.PP
\fBSee also\fP
.RS 4
https://docs.python.org/3.6/library/stdtypes.html#dict.update
.RE
.PP
\fBSince\fP
.RS 4
version 3\&.0\&.0 
.RE
.PP

.SS "\fBstring_t\fP nlohmann::basic_json::value (const \fBjson_pointer\fP & ptr, const char * default_value) const\fC [inline]\fP"

.PP
overload for a default value of type const char* 
.SS "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType nlohmann::basic_json::value (const \fBjson_pointer\fP & ptr, const ValueType & default_value) const\fC [inline]\fP"

.PP
access specified object element via JSON Pointer with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(ptr);
} catch(out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote\fP
.RS 4
Unlike \fBat(const json_pointer&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIptr\fP a JSON pointer to the element to access 
.br
\fIdefault_value\fP the value to return if \fIptr\fP found no value
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.302\fP if \fIdefault_value\fP does not match the type of the value at \fIptr\fP 
.br
\fItype_error\&.306\fP if the JSON value is not an object; in that case, using \fC\fBvalue()\fP\fP with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be queried with a default value\&.,basic_json__value_ptr}
.PP
\fBSee also\fP
.RS 4
\fBoperator[](const json_pointer&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince\fP
.RS 4
version 2\&.0\&.2 
.RE
.PP

.SS "\fBstring_t\fP nlohmann::basic_json::value (const typename object_t::key_type & key, const char * default_value) const\fC [inline]\fP"

.PP
overload for a default value of type const char* access specified object element with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(key);
} catch(out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote\fP
.RS 4
Unlike \fBat(const typename object_t::key_type&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.PP
Unlike \fBoperator[](const typename object_t::key_type& key)\fP, this function does not implicitly add an element to the position defined by \fIkey\fP\&. This function is furthermore also applicable to const objects\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access 
.br
\fIdefault_value\fP the value to return if \fIkey\fP is not found
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.302\fP if \fIdefault_value\fP does not match the type of the value at \fIkey\fP 
.br
\fItype_error\&.306\fP if the JSON value is not an object; in that case, using \fC\fBvalue()\fP\fP with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be queried with a default value\&.,basic_json__value}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<class ValueType , typename std::enable_if< std::is_convertible< basic_json_t, ValueType >::value, int >::type  = 0> ValueType nlohmann::basic_json::value (const typename object_t::key_type & key, const ValueType & default_value) const\fC [inline]\fP"

.PP
access specified object element with default value Returns either a copy of an object's element at the specified key \fIkey\fP or a given default value if no element with key \fIkey\fP exists\&.
.PP
The function is basically equivalent to executing 
.PP
.nf
try {
    return at(key);
} catch(out_of_range) {
    return default_value;
}

.fi
.PP
.PP
\fBNote\fP
.RS 4
Unlike \fBat(const typename object_t::key_type&)\fP, this function does not throw if the given key \fIkey\fP was not found\&.
.PP
Unlike \fBoperator[](const typename object_t::key_type& key)\fP, this function does not implicitly add an element to the position defined by \fIkey\fP\&. This function is furthermore also applicable to const objects\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIkey\fP key of the element to access 
.br
\fIdefault_value\fP the value to return if \fIkey\fP is not found
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIValueType\fP type compatible to JSON values, for instance \fCint\fP for JSON integer numbers, \fCbool\fP for JSON booleans, or \fCstd::vector\fP types for JSON arrays\&. Note the type of the expected value at \fIkey\fP and the default value \fIdefault_value\fP must be compatible\&.
.RE
.PP
\fBReturns\fP
.RS 4
copy of the element at key \fIkey\fP or \fIdefault_value\fP if \fIkey\fP is not found
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.302\fP if \fIdefault_value\fP does not match the type of the value at \fIkey\fP 
.br
\fItype_error\&.306\fP if the JSON value is not an object; in that case, using \fC\fBvalue()\fP\fP with a key makes no sense\&.
.RE
.PP
@complexity Logarithmic in the size of the container\&.
.PP
@liveexample{The example below shows how object elements can be queried with a default value\&.,basic_json__value}
.PP
\fBSee also\fP
.RS 4
\fBat(const typename object_t::key_type&)\fP for access by \fBreference\fP with range checking 
.PP
\fBoperator[](const typename object_t::key_type&)\fP for unchecked access by \fBreference\fP
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename BasicJsonType , typename SAX > friend class ::\fBnlohmann::detail::binary_reader\fP\fC [friend]\fP"

.SS "template<typename BasicJsonType , typename CharType > friend class ::\fBnlohmann::detail::binary_writer\fP\fC [friend]\fP"

.SS "template<typename BasicJsonType > friend class ::\fBnlohmann::detail::iter_impl\fP\fC [friend]\fP"

.SS "template<typename BasicJsonType > friend class ::\fBnlohmann::detail::json_sax_dom_callback_parser\fP\fC [friend]\fP"

.SS "template<typename BasicJsonType > friend class ::\fBnlohmann::detail::json_sax_dom_parser\fP\fC [friend]\fP"

.SS "template<detail::value_t > friend struct \fBdetail::external_constructor\fP\fC [friend]\fP"

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator!= (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: not equal comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator!= (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: not equal comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator!= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: not equal Compares two JSON values for inequality by calculating \fCnot (lhs == rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are not equal
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__notequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator< (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than comparison: less than Compares whether one JSON value \fIlhs\fP is less than another JSON value \fIrhs\fP according to the following rules:
.IP "\(bu" 2
If \fIlhs\fP and \fIrhs\fP have the same type, the values are compared using the default \fC<\fP operator\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison
.IP "\(bu" 2
In case \fIlhs\fP and \fIrhs\fP have different types, the values are ignored and the order of the types is considered, see \fBoperator<(const value_t, const value_t)\fP\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__less}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator< (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: less than comparison: less than Compares whether one JSON value \fIlhs\fP is less than another JSON value \fIrhs\fP according to the following rules:
.IP "\(bu" 2
If \fIlhs\fP and \fIrhs\fP have the same type, the values are compared using the default \fC<\fP operator\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison
.IP "\(bu" 2
In case \fIlhs\fP and \fIrhs\fP have different types, the values are ignored and the order of the types is considered, see \fBoperator<(const value_t, const value_t)\fP\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__less}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator< (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than Compares whether one JSON value \fIlhs\fP is less than another JSON value \fIrhs\fP according to the following rules:
.IP "\(bu" 2
If \fIlhs\fP and \fIrhs\fP have the same type, the values are compared using the default \fC<\fP operator\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison
.IP "\(bu" 2
In case \fIlhs\fP and \fIrhs\fP have different types, the values are ignored and the order of the types is considered, see \fBoperator<(const value_t, const value_t)\fP\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__less}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "std::istream& operator<< (\fBbasic_json\fP & j, std::istream & i)\fC [friend]\fP"

.PP
deserialize from stream 
.PP
\fBDeprecated\fP
.RS 4
This stream operator is deprecated and will be removed in version 4\&.0\&.0 of the library\&. Please use \fBoperator>>(std::istream&, basic_json&)\fP instead; that is, replace calls like \fCj << i;\fP with \fCi >> j;\fP\&. 
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0; deprecated since version 3\&.0\&.0 
.RE
.PP

.SS "std::ostream& operator<< (std::ostream & o, const \fBbasic_json\fP & j)\fC [friend]\fP"

.PP
serialize to stream Serialize the given JSON value \fIj\fP to the output stream \fIo\fP\&. The JSON value will be serialized using the \fBdump\fP member function\&.
.PP
.IP "\(bu" 2
The indentation of the output can be controlled with the member variable \fCwidth\fP of the output stream \fIo\fP\&. For instance, using the manipulator \fCstd::setw(4)\fP on \fIo\fP sets the indentation level to \fC4\fP and the serialization result is the same as calling \fCdump(4)\fP\&.
.IP "\(bu" 2
The indentation character can be controlled with the member variable \fCfill\fP of the output stream \fIo\fP\&. For instance, the manipulator `std::setfill('\\t')` sets indentation to use a tab character rather than the default space character\&.
.PP
.PP
\fBParameters\fP
.RS 4
\fIo\fP stream to serialize to 
.br
\fIj\fP JSON value to serialize
.RE
.PP
\fBReturns\fP
.RS 4
the stream \fIo\fP 
.RE
.PP
\fBExceptions\fP
.RS 4
\fItype_error\&.316\fP if a string stored inside the JSON value is not UTF-8 encoded
.RE
.PP
@complexity Linear\&.
.PP
@liveexample{The example below shows the serialization with different parameters to \fCwidth\fP to adjust the indentation level\&.,operator_serialize}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0; indentation character added in version 3\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator<= (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than or equal comparison: less than or equal Compares whether one JSON value \fIlhs\fP is less than or equal to another JSON value by calculating \fCnot (rhs < lhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greater}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator<= (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: less than or equal comparison: less than or equal Compares whether one JSON value \fIlhs\fP is less than or equal to another JSON value by calculating \fCnot (rhs < lhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greater}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator<= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: less than or equal Compares whether one JSON value \fIlhs\fP is less than or equal to another JSON value by calculating \fCnot (rhs < lhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is less than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greater}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator== (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: equal comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective \fCoperator==\fP\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Note than two NaN values are always treated as unequal\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBNote\fP
.RS 4
Floating-point inside JSON values numbers are compared with \fCjson::number_float_t::operator==\fP which is \fCdouble::operator==\fP by default\&. To compare floating-point while respecting an epsilon, an alternative \fCcomparison function\fP could be used, for instance 
.PP
.nf
template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
{
    return std::abs(a - b) <= epsilon;
}

.fi
.PP
.PP
NaN values never compare equal to themselves or to other NaN values\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@complexity Linear\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator== (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: equal comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective \fCoperator==\fP\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Note than two NaN values are always treated as unequal\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBNote\fP
.RS 4
Floating-point inside JSON values numbers are compared with \fCjson::number_float_t::operator==\fP which is \fCdouble::operator==\fP by default\&. To compare floating-point while respecting an epsilon, an alternative \fCcomparison function\fP could be used, for instance 
.PP
.nf
template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
{
    return std::abs(a - b) <= epsilon;
}

.fi
.PP
.PP
NaN values never compare equal to themselves or to other NaN values\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@complexity Linear\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator== (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: equal Compares two JSON values for equality according to the following rules:
.IP "\(bu" 2
Two JSON values are equal if (1) they are from the same type and (2) their stored values are the same according to their respective \fCoperator==\fP\&.
.IP "\(bu" 2
Integer and floating-point numbers are automatically converted before comparison\&. Note than two NaN values are always treated as unequal\&.
.IP "\(bu" 2
Two JSON null values are equal\&.
.PP
.PP
\fBNote\fP
.RS 4
Floating-point inside JSON values numbers are compared with \fCjson::number_float_t::operator==\fP which is \fCdouble::operator==\fP by default\&. To compare floating-point while respecting an epsilon, an alternative \fCcomparison function\fP could be used, for instance 
.PP
.nf
template<typename T, typename = typename std::enable_if<std::is_floating_point<T>::value, T>::type>
inline bool is_same(T a, T b, T epsilon = std::numeric_limits<T>::epsilon()) noexcept
{
    return std::abs(a - b) <= epsilon;
}

.fi
.PP
.PP
NaN values never compare equal to themselves or to other NaN values\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether the values \fIlhs\fP and \fIrhs\fP are equal
.RE
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@complexity Linear\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__equal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator> (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than comparison: greater than Compares whether one JSON value \fIlhs\fP is greater than another JSON value by calculating \fCnot (lhs <= rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__lessequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator> (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: greater than comparison: greater than Compares whether one JSON value \fIlhs\fP is greater than another JSON value by calculating \fCnot (lhs <= rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__lessequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator> (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than Compares whether one JSON value \fIlhs\fP is greater than another JSON value by calculating \fCnot (lhs <= rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__lessequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator>= (const ScalarType lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than or equal comparison: greater than or equal Compares whether one JSON value \fIlhs\fP is greater than or equal to another JSON value by calculating \fCnot (lhs < rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greaterequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "template<typename ScalarType , typename std::enable_if< std::is_scalar< ScalarType >::value, int >::type  = 0> bool operator>= (\fBconst_reference\fP lhs, const ScalarType rhs)\fC [friend]\fP"

.PP
comparison: greater than or equal comparison: greater than or equal Compares whether one JSON value \fIlhs\fP is greater than or equal to another JSON value by calculating \fCnot (lhs < rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greaterequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "bool operator>= (\fBconst_reference\fP lhs, \fBconst_reference\fP rhs)\fC [friend]\fP"

.PP
comparison: greater than or equal Compares whether one JSON value \fIlhs\fP is greater than or equal to another JSON value by calculating \fCnot (lhs < rhs)\fP\&.
.PP
\fBParameters\fP
.RS 4
\fIlhs\fP first JSON value to consider 
.br
\fIrhs\fP second JSON value to consider 
.RE
.PP
\fBReturns\fP
.RS 4
whether \fIlhs\fP is greater than or equal to \fIrhs\fP 
.RE
.PP
@complexity Linear\&.
.PP
@exceptionsafety No-throw guarantee: this function never throws exceptions\&.
.PP
@liveexample{The example demonstrates comparing several JSON types\&.,operator__greaterequal}
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP

.SS "std::ostream& operator>> (const \fBbasic_json\fP & j, std::ostream & o)\fC [friend]\fP"

.PP
serialize to stream 
.PP
\fBDeprecated\fP
.RS 4
This stream operator is deprecated and will be removed in future 4\&.0\&.0 of the library\&. Please use \fBoperator<<(std::ostream&, const basic_json&)\fP instead; that is, replace calls like \fCj >> o;\fP with \fCo << j;\fP\&. 
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0; deprecated since version 3\&.0\&.0 
.RE
.PP

.SS "std::istream& operator>> (std::istream & i, \fBbasic_json\fP & j)\fC [friend]\fP"

.PP
deserialize from stream Deserializes an input stream to a JSON value\&.
.PP
\fBParameters\fP
.RS 4
\fIi\fP input stream to read a serialized JSON value from 
.br
\fIj\fP JSON value to write the deserialized input to
.RE
.PP
\fBExceptions\fP
.RS 4
\fIparse_error\&.101\fP in case of an unexpected token 
.br
\fIparse_error\&.102\fP if to_unicode fails or surrogate error 
.br
\fIparse_error\&.103\fP if to_unicode fails
.RE
.PP
@complexity Linear in the length of the input\&. The parser is a predictive LL(1) parser\&.
.PP
\fBNote\fP
.RS 4
A UTF-8 byte order mark is silently ignored\&.
.RE
.PP
@liveexample{The example below shows how a JSON value is constructed by reading a serialization from a stream\&.,operator_deserialize}
.PP
\fBSee also\fP
.RS 4
parse(std::istream&, const parser_callback_t) for a variant with a parser callback function to filter values while parsing
.RE
.PP
\fBSince\fP
.RS 4
version 1\&.0\&.0 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for Forge from the source code\&.
